/*
* generated by Xtext
*/

package org.xtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SwrtjGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportListImportParserRuleCall_0_0 = (RuleCall)cImportListAssignment_0.eContents().get(0);
		private final Assignment cElementListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementListElementParserRuleCall_1_0 = (RuleCall)cElementListAssignment_1.eContents().get(0);
		
		//File:
		//	importList+=Import* elementList+=Element*;
		public ParserRule getRule() { return rule; }

		//importList+=Import* elementList+=Element*
		public Group getGroup() { return cGroup; }

		//importList+=Import*
		public Assignment getImportListAssignment_0() { return cImportListAssignment_0; }

		//Import
		public RuleCall getImportListImportParserRuleCall_0_0() { return cImportListImportParserRuleCall_0_0; }

		//elementList+=Element*
		public Assignment getElementListAssignment_1() { return cElementListAssignment_1; }

		//Element
		public RuleCall getElementListElementParserRuleCall_1_0() { return cElementListElementParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRecordParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTraitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClassParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProgramParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Element:
		//	Interface | Record | Trait | Class | Program;
		public ParserRule getRule() { return rule; }

		//Interface | Record | Trait | Class | Program
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_0() { return cInterfaceParserRuleCall_0; }

		//Record
		public RuleCall getRecordParserRuleCall_1() { return cRecordParserRuleCall_1; }

		//Trait
		public RuleCall getTraitParserRuleCall_2() { return cTraitParserRuleCall_2; }

		//Class
		public RuleCall getClassParserRuleCall_3() { return cClassParserRuleCall_3; }

		//Program
		public RuleCall getProgramParserRuleCall_4() { return cProgramParserRuleCall_4; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstructInterfaceKeyword_0_0 = (Keyword)cConstructAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsListInterfaceCrossReference_2_1_0 = (CrossReference)cExtendsListAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsListInterfaceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendsListInterfaceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cExtendsListAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cExtendsListInterfaceCrossReference_2_2_1_0 = (CrossReference)cExtendsListAssignment_2_2_1.eContents().get(0);
		private final RuleCall cExtendsListInterfaceIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cExtendsListInterfaceCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequiredMethodListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRequiredMethodListRequiredMethodParserRuleCall_4_0 = (RuleCall)cRequiredMethodListAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *Element declarations* / Interface:
		//	construct="interface" name=ID ("extends" extendsList+=[Interface] ("," extendsList+=[Interface])*)? "{"
		//	requiredMethodList+=RequiredMethod* "}";
		public ParserRule getRule() { return rule; }

		//construct="interface" name=ID ("extends" extendsList+=[Interface] ("," extendsList+=[Interface])*)? "{"
		//requiredMethodList+=RequiredMethod* "}"
		public Group getGroup() { return cGroup; }

		//construct="interface"
		public Assignment getConstructAssignment_0() { return cConstructAssignment_0; }

		//"interface"
		public Keyword getConstructInterfaceKeyword_0_0() { return cConstructInterfaceKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" extendsList+=[Interface] ("," extendsList+=[Interface])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//extendsList+=[Interface]
		public Assignment getExtendsListAssignment_2_1() { return cExtendsListAssignment_2_1; }

		//[Interface]
		public CrossReference getExtendsListInterfaceCrossReference_2_1_0() { return cExtendsListInterfaceCrossReference_2_1_0; }

		//ID
		public RuleCall getExtendsListInterfaceIDTerminalRuleCall_2_1_0_1() { return cExtendsListInterfaceIDTerminalRuleCall_2_1_0_1; }

		//("," extendsList+=[Interface])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//extendsList+=[Interface]
		public Assignment getExtendsListAssignment_2_2_1() { return cExtendsListAssignment_2_2_1; }

		//[Interface]
		public CrossReference getExtendsListInterfaceCrossReference_2_2_1_0() { return cExtendsListInterfaceCrossReference_2_2_1_0; }

		//ID
		public RuleCall getExtendsListInterfaceIDTerminalRuleCall_2_2_1_0_1() { return cExtendsListInterfaceIDTerminalRuleCall_2_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//requiredMethodList+=RequiredMethod*
		public Assignment getRequiredMethodListAssignment_4() { return cRequiredMethodListAssignment_4; }

		//RequiredMethod
		public RuleCall getRequiredMethodListRequiredMethodParserRuleCall_4_0() { return cRequiredMethodListRequiredMethodParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Record");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstructRecordKeyword_0_0 = (Keyword)cConstructAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionRecordExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Record:
		//	construct="record" name=ID "is" expression=RecordExpression;
		public ParserRule getRule() { return rule; }

		//construct="record" name=ID "is" expression=RecordExpression
		public Group getGroup() { return cGroup; }

		//construct="record"
		public Assignment getConstructAssignment_0() { return cConstructAssignment_0; }

		//"record"
		public Keyword getConstructRecordKeyword_0_0() { return cConstructRecordKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//expression=RecordExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//RecordExpression
		public RuleCall getExpressionRecordExpressionParserRuleCall_3_0() { return cExpressionRecordExpressionParserRuleCall_3_0; }
	}

	public class TraitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstructTraitKeyword_0_0 = (Keyword)cConstructAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionTraitExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Trait:
		//	construct="trait" name=ID "is" expression=TraitExpression;
		public ParserRule getRule() { return rule; }

		//construct="trait" name=ID "is" expression=TraitExpression
		public Group getGroup() { return cGroup; }

		//construct="trait"
		public Assignment getConstructAssignment_0() { return cConstructAssignment_0; }

		//"trait"
		public Keyword getConstructTraitKeyword_0_0() { return cConstructTraitKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//expression=TraitExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//TraitExpression
		public RuleCall getExpressionTraitExpressionParserRuleCall_3_0() { return cExpressionTraitExpressionParserRuleCall_3_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstructClassKeyword_0_0 = (Keyword)cConstructAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cImplementsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImplementsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cImplementsListInterfaceCrossReference_3_0 = (CrossReference)cImplementsListAssignment_3.eContents().get(0);
		private final RuleCall cImplementsListInterfaceIDTerminalRuleCall_3_0_1 = (RuleCall)cImplementsListInterfaceCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplementsListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cImplementsListInterfaceCrossReference_4_1_0 = (CrossReference)cImplementsListAssignment_4_1.eContents().get(0);
		private final RuleCall cImplementsListInterfaceIDTerminalRuleCall_4_1_0_1 = (RuleCall)cImplementsListInterfaceCrossReference_4_1_0.eContents().get(1);
		private final Keyword cByKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRecordExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRecordExpressionRecordExpressionParserRuleCall_6_0 = (RuleCall)cRecordExpressionAssignment_6.eContents().get(0);
		private final Keyword cAndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTraitExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTraitExpressionTraitExpressionParserRuleCall_8_0 = (RuleCall)cTraitExpressionAssignment_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cConstructorListAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cConstructorListConstructorParserRuleCall_10_0 = (RuleCall)cConstructorListAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Class:
		//	construct="class" name=ID "implements" implementsList+=[Interface] ("," implementsList+=[Interface])* "by"
		//	recordExpression=RecordExpression "and" traitExpression=TraitExpression "{" constructorList+=Constructor* "}";
		public ParserRule getRule() { return rule; }

		//construct="class" name=ID "implements" implementsList+=[Interface] ("," implementsList+=[Interface])* "by"
		//recordExpression=RecordExpression "and" traitExpression=TraitExpression "{" constructorList+=Constructor* "}"
		public Group getGroup() { return cGroup; }

		//construct="class"
		public Assignment getConstructAssignment_0() { return cConstructAssignment_0; }

		//"class"
		public Keyword getConstructClassKeyword_0_0() { return cConstructClassKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"implements"
		public Keyword getImplementsKeyword_2() { return cImplementsKeyword_2; }

		//implementsList+=[Interface]
		public Assignment getImplementsListAssignment_3() { return cImplementsListAssignment_3; }

		//[Interface]
		public CrossReference getImplementsListInterfaceCrossReference_3_0() { return cImplementsListInterfaceCrossReference_3_0; }

		//ID
		public RuleCall getImplementsListInterfaceIDTerminalRuleCall_3_0_1() { return cImplementsListInterfaceIDTerminalRuleCall_3_0_1; }

		//("," implementsList+=[Interface])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//implementsList+=[Interface]
		public Assignment getImplementsListAssignment_4_1() { return cImplementsListAssignment_4_1; }

		//[Interface]
		public CrossReference getImplementsListInterfaceCrossReference_4_1_0() { return cImplementsListInterfaceCrossReference_4_1_0; }

		//ID
		public RuleCall getImplementsListInterfaceIDTerminalRuleCall_4_1_0_1() { return cImplementsListInterfaceIDTerminalRuleCall_4_1_0_1; }

		//"by"
		public Keyword getByKeyword_5() { return cByKeyword_5; }

		//recordExpression=RecordExpression
		public Assignment getRecordExpressionAssignment_6() { return cRecordExpressionAssignment_6; }

		//RecordExpression
		public RuleCall getRecordExpressionRecordExpressionParserRuleCall_6_0() { return cRecordExpressionRecordExpressionParserRuleCall_6_0; }

		//"and"
		public Keyword getAndKeyword_7() { return cAndKeyword_7; }

		//traitExpression=TraitExpression
		public Assignment getTraitExpressionAssignment_8() { return cTraitExpressionAssignment_8; }

		//TraitExpression
		public RuleCall getTraitExpressionTraitExpressionParserRuleCall_8_0() { return cTraitExpressionTraitExpressionParserRuleCall_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//constructorList+=Constructor*
		public Assignment getConstructorListAssignment_10() { return cConstructorListAssignment_10; }

		//Constructor
		public RuleCall getConstructorListConstructorParserRuleCall_10_0() { return cConstructorListConstructorParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstructProgramKeyword_0_0 = (Keyword)cConstructAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program:
		//	construct="program" name=ID "{" block=Block "}";
		public ParserRule getRule() { return rule; }

		//construct="program" name=ID "{" block=Block "}"
		public Group getGroup() { return cGroup; }

		//construct="program"
		public Assignment getConstructAssignment_0() { return cConstructAssignment_0; }

		//"program"
		public Keyword getConstructProgramKeyword_0_0() { return cConstructProgramKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RecordExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRecordListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRecordListBaseRecordParserRuleCall_0_0 = (RuleCall)cRecordListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRecordListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRecordListBaseRecordParserRuleCall_1_1_0 = (RuleCall)cRecordListAssignment_1_1.eContents().get(0);
		
		/// *Traits and records* / RecordExpression:
		//	recordList+=BaseRecord ("+" recordList+=BaseRecord)*;
		public ParserRule getRule() { return rule; }

		//recordList+=BaseRecord ("+" recordList+=BaseRecord)*
		public Group getGroup() { return cGroup; }

		//recordList+=BaseRecord
		public Assignment getRecordListAssignment_0() { return cRecordListAssignment_0; }

		//BaseRecord
		public RuleCall getRecordListBaseRecordParserRuleCall_0_0() { return cRecordListBaseRecordParserRuleCall_0_0; }

		//("+" recordList+=BaseRecord)*
		public Group getGroup_1() { return cGroup_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//recordList+=BaseRecord
		public Assignment getRecordListAssignment_1_1() { return cRecordListAssignment_1_1; }

		//BaseRecord
		public RuleCall getRecordListBaseRecordParserRuleCall_1_1_0() { return cRecordListBaseRecordParserRuleCall_1_1_0; }
	}

	public class BaseRecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseRecord");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnonimousRecordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRecordNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNestedRecordExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BaseRecord:
		//	AnonimousRecord | RecordName | NestedRecordExpression;
		public ParserRule getRule() { return rule; }

		//AnonimousRecord | RecordName | NestedRecordExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnonimousRecord
		public RuleCall getAnonimousRecordParserRuleCall_0() { return cAnonimousRecordParserRuleCall_0; }

		//RecordName
		public RuleCall getRecordNameParserRuleCall_1() { return cRecordNameParserRuleCall_1; }

		//NestedRecordExpression
		public RuleCall getNestedRecordExpressionParserRuleCall_2() { return cNestedRecordExpressionParserRuleCall_2; }
	}

	public class AnonimousRecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnonimousRecord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAnonimousRecordAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cDeclarationListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationListFieldDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationListAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperationListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperationListRecordOperationParserRuleCall_4_1_0 = (RuleCall)cOperationListAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOperationListAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOperationListRecordOperationParserRuleCall_4_2_1_0 = (RuleCall)cOperationListAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//AnonimousRecord:
		//	"{" {AnonimousRecord} declarationList+=FieldDeclaration* "}" ("[" operationList+=RecordOperation (","
		//	operationList+=RecordOperation)* "]")?;
		public ParserRule getRule() { return rule; }

		//"{" {AnonimousRecord} declarationList+=FieldDeclaration* "}" ("[" operationList+=RecordOperation (","
		//operationList+=RecordOperation)* "]")?
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{AnonimousRecord}
		public Action getAnonimousRecordAction_1() { return cAnonimousRecordAction_1; }

		//declarationList+=FieldDeclaration*
		public Assignment getDeclarationListAssignment_2() { return cDeclarationListAssignment_2; }

		//FieldDeclaration
		public RuleCall getDeclarationListFieldDeclarationParserRuleCall_2_0() { return cDeclarationListFieldDeclarationParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//("[" operationList+=RecordOperation ("," operationList+=RecordOperation)* "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//operationList+=RecordOperation
		public Assignment getOperationListAssignment_4_1() { return cOperationListAssignment_4_1; }

		//RecordOperation
		public RuleCall getOperationListRecordOperationParserRuleCall_4_1_0() { return cOperationListRecordOperationParserRuleCall_4_1_0; }

		//("," operationList+=RecordOperation)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//operationList+=RecordOperation
		public Assignment getOperationListAssignment_4_2_1() { return cOperationListAssignment_4_2_1; }

		//RecordOperation
		public RuleCall getOperationListRecordOperationParserRuleCall_4_2_1_0() { return cOperationListRecordOperationParserRuleCall_4_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
	}

	public class RecordNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRecordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRecordRecordCrossReference_0_0 = (CrossReference)cRecordAssignment_0.eContents().get(0);
		private final RuleCall cRecordRecordIDTerminalRuleCall_0_0_1 = (RuleCall)cRecordRecordCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperationListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperationListRecordOperationParserRuleCall_1_1_0 = (RuleCall)cOperationListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOperationListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOperationListRecordOperationParserRuleCall_1_2_1_0 = (RuleCall)cOperationListAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//RecordName:
		//	record=[Record] ("[" operationList+=RecordOperation ("," operationList+=RecordOperation)* "]")?;
		public ParserRule getRule() { return rule; }

		//record=[Record] ("[" operationList+=RecordOperation ("," operationList+=RecordOperation)* "]")?
		public Group getGroup() { return cGroup; }

		//record=[Record]
		public Assignment getRecordAssignment_0() { return cRecordAssignment_0; }

		//[Record]
		public CrossReference getRecordRecordCrossReference_0_0() { return cRecordRecordCrossReference_0_0; }

		//ID
		public RuleCall getRecordRecordIDTerminalRuleCall_0_0_1() { return cRecordRecordIDTerminalRuleCall_0_0_1; }

		//("[" operationList+=RecordOperation ("," operationList+=RecordOperation)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//operationList+=RecordOperation
		public Assignment getOperationListAssignment_1_1() { return cOperationListAssignment_1_1; }

		//RecordOperation
		public RuleCall getOperationListRecordOperationParserRuleCall_1_1_0() { return cOperationListRecordOperationParserRuleCall_1_1_0; }

		//("," operationList+=RecordOperation)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//operationList+=RecordOperation
		public Assignment getOperationListAssignment_1_2_1() { return cOperationListAssignment_1_2_1; }

		//RecordOperation
		public RuleCall getOperationListRecordOperationParserRuleCall_1_2_1_0() { return cOperationListRecordOperationParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class NestedRecordExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedRecordExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionRecordExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperationListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperationListRecordOperationParserRuleCall_3_1_0 = (RuleCall)cOperationListAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOperationListAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOperationListRecordOperationParserRuleCall_3_2_1_0 = (RuleCall)cOperationListAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//NestedRecordExpression:
		//	"(" expression=RecordExpression ")" ("[" operationList+=RecordOperation ("," operationList+=RecordOperation)* "]")?;
		public ParserRule getRule() { return rule; }

		//"(" expression=RecordExpression ")" ("[" operationList+=RecordOperation ("," operationList+=RecordOperation)* "]")?
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=RecordExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//RecordExpression
		public RuleCall getExpressionRecordExpressionParserRuleCall_1_0() { return cExpressionRecordExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//("[" operationList+=RecordOperation ("," operationList+=RecordOperation)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//operationList+=RecordOperation
		public Assignment getOperationListAssignment_3_1() { return cOperationListAssignment_3_1; }

		//RecordOperation
		public RuleCall getOperationListRecordOperationParserRuleCall_3_1_0() { return cOperationListRecordOperationParserRuleCall_3_1_0; }

		//("," operationList+=RecordOperation)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//operationList+=RecordOperation
		public Assignment getOperationListAssignment_3_2_1() { return cOperationListAssignment_3_2_1; }

		//RecordOperation
		public RuleCall getOperationListRecordOperationParserRuleCall_3_2_1_0() { return cOperationListRecordOperationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class RecordOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRecordExcludeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExcludeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFieldAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cFieldFieldNameCrossReference_0_2_0 = (CrossReference)cFieldAssignment_0_2.eContents().get(0);
		private final RuleCall cFieldFieldNameIDTerminalRuleCall_0_2_0_1 = (RuleCall)cFieldFieldNameCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRecordRenameAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOriginalFieldAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cOriginalFieldFieldNameCrossReference_1_1_0 = (CrossReference)cOriginalFieldAssignment_1_1.eContents().get(0);
		private final RuleCall cOriginalFieldFieldNameIDTerminalRuleCall_1_1_0_1 = (RuleCall)cOriginalFieldFieldNameCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRenameToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNewFieldAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNewFieldFieldNameParserRuleCall_1_3_0 = (RuleCall)cNewFieldAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRecordRenameAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOriginalFieldAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOriginalFieldFieldNameCrossReference_2_1_0 = (CrossReference)cOriginalFieldAssignment_2_1.eContents().get(0);
		private final RuleCall cOriginalFieldFieldNameIDTerminalRuleCall_2_1_0_1 = (RuleCall)cOriginalFieldFieldNameCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRenameFKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNewFieldAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNewFieldFieldNameParserRuleCall_2_3_0 = (RuleCall)cNewFieldAssignment_2_3.eContents().get(0);
		
		//RecordOperation:
		//	{RecordExclude} "exclude" field=[FieldName] | {RecordRename} originalField=[FieldName] "renameTo" newField=FieldName |
		//	{RecordRename} originalField=[FieldName] "renameF" newField=FieldName;
		public ParserRule getRule() { return rule; }

		//{RecordExclude} "exclude" field=[FieldName] | {RecordRename} originalField=[FieldName] "renameTo" newField=FieldName |
		//{RecordRename} originalField=[FieldName] "renameF" newField=FieldName
		public Alternatives getAlternatives() { return cAlternatives; }

		//{RecordExclude} "exclude" field=[FieldName]
		public Group getGroup_0() { return cGroup_0; }

		//{RecordExclude}
		public Action getRecordExcludeAction_0_0() { return cRecordExcludeAction_0_0; }

		//"exclude"
		public Keyword getExcludeKeyword_0_1() { return cExcludeKeyword_0_1; }

		//field=[FieldName]
		public Assignment getFieldAssignment_0_2() { return cFieldAssignment_0_2; }

		//[FieldName]
		public CrossReference getFieldFieldNameCrossReference_0_2_0() { return cFieldFieldNameCrossReference_0_2_0; }

		//ID
		public RuleCall getFieldFieldNameIDTerminalRuleCall_0_2_0_1() { return cFieldFieldNameIDTerminalRuleCall_0_2_0_1; }

		//{RecordRename} originalField=[FieldName] "renameTo" newField=FieldName
		public Group getGroup_1() { return cGroup_1; }

		//{RecordRename}
		public Action getRecordRenameAction_1_0() { return cRecordRenameAction_1_0; }

		//originalField=[FieldName]
		public Assignment getOriginalFieldAssignment_1_1() { return cOriginalFieldAssignment_1_1; }

		//[FieldName]
		public CrossReference getOriginalFieldFieldNameCrossReference_1_1_0() { return cOriginalFieldFieldNameCrossReference_1_1_0; }

		//ID
		public RuleCall getOriginalFieldFieldNameIDTerminalRuleCall_1_1_0_1() { return cOriginalFieldFieldNameIDTerminalRuleCall_1_1_0_1; }

		//"renameTo"
		public Keyword getRenameToKeyword_1_2() { return cRenameToKeyword_1_2; }

		//newField=FieldName
		public Assignment getNewFieldAssignment_1_3() { return cNewFieldAssignment_1_3; }

		//FieldName
		public RuleCall getNewFieldFieldNameParserRuleCall_1_3_0() { return cNewFieldFieldNameParserRuleCall_1_3_0; }

		//{RecordRename} originalField=[FieldName] "renameF" newField=FieldName
		public Group getGroup_2() { return cGroup_2; }

		//{RecordRename}
		public Action getRecordRenameAction_2_0() { return cRecordRenameAction_2_0; }

		//originalField=[FieldName]
		public Assignment getOriginalFieldAssignment_2_1() { return cOriginalFieldAssignment_2_1; }

		//[FieldName]
		public CrossReference getOriginalFieldFieldNameCrossReference_2_1_0() { return cOriginalFieldFieldNameCrossReference_2_1_0; }

		//ID
		public RuleCall getOriginalFieldFieldNameIDTerminalRuleCall_2_1_0_1() { return cOriginalFieldFieldNameIDTerminalRuleCall_2_1_0_1; }

		//"renameF"
		public Keyword getRenameFKeyword_2_2() { return cRenameFKeyword_2_2; }

		//newField=FieldName
		public Assignment getNewFieldAssignment_2_3() { return cNewFieldAssignment_2_3; }

		//FieldName
		public RuleCall getNewFieldFieldNameParserRuleCall_2_3_0() { return cNewFieldFieldNameParserRuleCall_2_3_0; }
	}

	public class TraitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraitExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTraitListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTraitListBaseTraitParserRuleCall_0_0 = (RuleCall)cTraitListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTraitListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTraitListBaseTraitParserRuleCall_1_1_0 = (RuleCall)cTraitListAssignment_1_1.eContents().get(0);
		
		//TraitExpression:
		//	traitList+=BaseTrait ("+" traitList+=BaseTrait)*;
		public ParserRule getRule() { return rule; }

		//traitList+=BaseTrait ("+" traitList+=BaseTrait)*
		public Group getGroup() { return cGroup; }

		//traitList+=BaseTrait
		public Assignment getTraitListAssignment_0() { return cTraitListAssignment_0; }

		//BaseTrait
		public RuleCall getTraitListBaseTraitParserRuleCall_0_0() { return cTraitListBaseTraitParserRuleCall_0_0; }

		//("+" traitList+=BaseTrait)*
		public Group getGroup_1() { return cGroup_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//traitList+=BaseTrait
		public Assignment getTraitListAssignment_1_1() { return cTraitListAssignment_1_1; }

		//BaseTrait
		public RuleCall getTraitListBaseTraitParserRuleCall_1_1_0() { return cTraitListBaseTraitParserRuleCall_1_1_0; }
	}

	public class BaseTraitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseTrait");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnonimousTraitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTraitNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNestedTraitExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BaseTrait:
		//	AnonimousTrait | TraitName | NestedTraitExpression;
		public ParserRule getRule() { return rule; }

		//AnonimousTrait | TraitName | NestedTraitExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnonimousTrait
		public RuleCall getAnonimousTraitParserRuleCall_0() { return cAnonimousTraitParserRuleCall_0; }

		//TraitName
		public RuleCall getTraitNameParserRuleCall_1() { return cTraitNameParserRuleCall_1; }

		//NestedTraitExpression
		public RuleCall getNestedTraitExpressionParserRuleCall_2() { return cNestedTraitExpressionParserRuleCall_2; }
	}

	public class AnonimousTraitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnonimousTrait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAnonimousTraitAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cDefinitionListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionListTraitElementParserRuleCall_2_0 = (RuleCall)cDefinitionListAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperationListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperationListTraitOperationParserRuleCall_4_1_0 = (RuleCall)cOperationListAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOperationListAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOperationListTraitOperationParserRuleCall_4_2_1_0 = (RuleCall)cOperationListAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//AnonimousTrait:
		//	"{" {AnonimousTrait} definitionList+=TraitElement* "}" ("[" operationList+=TraitOperation (","
		//	operationList+=TraitOperation)* "]")?;
		public ParserRule getRule() { return rule; }

		//"{" {AnonimousTrait} definitionList+=TraitElement* "}" ("[" operationList+=TraitOperation (","
		//operationList+=TraitOperation)* "]")?
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{AnonimousTrait}
		public Action getAnonimousTraitAction_1() { return cAnonimousTraitAction_1; }

		//definitionList+=TraitElement*
		public Assignment getDefinitionListAssignment_2() { return cDefinitionListAssignment_2; }

		//TraitElement
		public RuleCall getDefinitionListTraitElementParserRuleCall_2_0() { return cDefinitionListTraitElementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//("[" operationList+=TraitOperation ("," operationList+=TraitOperation)* "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//operationList+=TraitOperation
		public Assignment getOperationListAssignment_4_1() { return cOperationListAssignment_4_1; }

		//TraitOperation
		public RuleCall getOperationListTraitOperationParserRuleCall_4_1_0() { return cOperationListTraitOperationParserRuleCall_4_1_0; }

		//("," operationList+=TraitOperation)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//operationList+=TraitOperation
		public Assignment getOperationListAssignment_4_2_1() { return cOperationListAssignment_4_2_1; }

		//TraitOperation
		public RuleCall getOperationListTraitOperationParserRuleCall_4_2_1_0() { return cOperationListTraitOperationParserRuleCall_4_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
	}

	public class TraitNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraitName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTraitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTraitTraitCrossReference_0_0 = (CrossReference)cTraitAssignment_0.eContents().get(0);
		private final RuleCall cTraitTraitIDTerminalRuleCall_0_0_1 = (RuleCall)cTraitTraitCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperationListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperationListTraitOperationParserRuleCall_1_1_0 = (RuleCall)cOperationListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOperationListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOperationListTraitOperationParserRuleCall_1_2_1_0 = (RuleCall)cOperationListAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//TraitName:
		//	trait=[Trait] ("[" operationList+=TraitOperation ("," operationList+=TraitOperation)* "]")?;
		public ParserRule getRule() { return rule; }

		//trait=[Trait] ("[" operationList+=TraitOperation ("," operationList+=TraitOperation)* "]")?
		public Group getGroup() { return cGroup; }

		//trait=[Trait]
		public Assignment getTraitAssignment_0() { return cTraitAssignment_0; }

		//[Trait]
		public CrossReference getTraitTraitCrossReference_0_0() { return cTraitTraitCrossReference_0_0; }

		//ID
		public RuleCall getTraitTraitIDTerminalRuleCall_0_0_1() { return cTraitTraitIDTerminalRuleCall_0_0_1; }

		//("[" operationList+=TraitOperation ("," operationList+=TraitOperation)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//operationList+=TraitOperation
		public Assignment getOperationListAssignment_1_1() { return cOperationListAssignment_1_1; }

		//TraitOperation
		public RuleCall getOperationListTraitOperationParserRuleCall_1_1_0() { return cOperationListTraitOperationParserRuleCall_1_1_0; }

		//("," operationList+=TraitOperation)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//operationList+=TraitOperation
		public Assignment getOperationListAssignment_1_2_1() { return cOperationListAssignment_1_2_1; }

		//TraitOperation
		public RuleCall getOperationListTraitOperationParserRuleCall_1_2_1_0() { return cOperationListTraitOperationParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class NestedTraitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedTraitExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionTraitExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOperationListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperationListTraitOperationParserRuleCall_3_1_0 = (RuleCall)cOperationListAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOperationListAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOperationListTraitOperationParserRuleCall_3_2_1_0 = (RuleCall)cOperationListAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//NestedTraitExpression:
		//	"(" expression=TraitExpression ")" ("[" operationList+=TraitOperation ("," operationList+=TraitOperation)* "]")?;
		public ParserRule getRule() { return rule; }

		//"(" expression=TraitExpression ")" ("[" operationList+=TraitOperation ("," operationList+=TraitOperation)* "]")?
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=TraitExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//TraitExpression
		public RuleCall getExpressionTraitExpressionParserRuleCall_1_0() { return cExpressionTraitExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//("[" operationList+=TraitOperation ("," operationList+=TraitOperation)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//operationList+=TraitOperation
		public Assignment getOperationListAssignment_3_1() { return cOperationListAssignment_3_1; }

		//TraitOperation
		public RuleCall getOperationListTraitOperationParserRuleCall_3_1_0() { return cOperationListTraitOperationParserRuleCall_3_1_0; }

		//("," operationList+=TraitOperation)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//operationList+=TraitOperation
		public Assignment getOperationListAssignment_3_2_1() { return cOperationListAssignment_3_2_1; }

		//TraitOperation
		public RuleCall getOperationListTraitOperationParserRuleCall_3_2_1_0() { return cOperationListTraitOperationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class TraitOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraitOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTraitExcludeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExcludeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMethodAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cMethodMethodNameCrossReference_0_2_0 = (CrossReference)cMethodAssignment_0_2.eContents().get(0);
		private final RuleCall cMethodMethodNameIDTerminalRuleCall_0_2_0_1 = (RuleCall)cMethodMethodNameCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTraitAliasAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOriginalMethodAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cOriginalMethodMethodNameCrossReference_1_1_0 = (CrossReference)cOriginalMethodAssignment_1_1.eContents().get(0);
		private final RuleCall cOriginalMethodMethodNameIDTerminalRuleCall_1_1_0_1 = (RuleCall)cOriginalMethodMethodNameCrossReference_1_1_0.eContents().get(1);
		private final Keyword cAliasAsKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNewMethodAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNewMethodMethodNameParserRuleCall_1_3_0 = (RuleCall)cNewMethodAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTraitMethodRenameAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOriginalMethodAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOriginalMethodMethodNameCrossReference_2_1_0 = (CrossReference)cOriginalMethodAssignment_2_1.eContents().get(0);
		private final RuleCall cOriginalMethodMethodNameIDTerminalRuleCall_2_1_0_1 = (RuleCall)cOriginalMethodMethodNameCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRenameToKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNewMethodAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNewMethodMethodNameParserRuleCall_2_3_0 = (RuleCall)cNewMethodAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cTraitMethodRenameAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cOriginalMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cOriginalMethodMethodNameCrossReference_3_1_0 = (CrossReference)cOriginalMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cOriginalMethodMethodNameIDTerminalRuleCall_3_1_0_1 = (RuleCall)cOriginalMethodMethodNameCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRenameMKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNewMethodAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cNewMethodMethodNameParserRuleCall_3_3_0 = (RuleCall)cNewMethodAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cTraitFieldRenameAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cOriginalFieldAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cOriginalFieldFieldNameCrossReference_4_1_0 = (CrossReference)cOriginalFieldAssignment_4_1.eContents().get(0);
		private final RuleCall cOriginalFieldFieldNameIDTerminalRuleCall_4_1_0_1 = (RuleCall)cOriginalFieldFieldNameCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRenameFieldToKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cNewFieldAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cNewFieldFieldNameParserRuleCall_4_3_0 = (RuleCall)cNewFieldAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cTraitFieldRenameAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cOriginalFieldAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cOriginalFieldFieldNameCrossReference_5_1_0 = (CrossReference)cOriginalFieldAssignment_5_1.eContents().get(0);
		private final RuleCall cOriginalFieldFieldNameIDTerminalRuleCall_5_1_0_1 = (RuleCall)cOriginalFieldFieldNameCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRenameFKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cNewFieldAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cNewFieldFieldNameParserRuleCall_5_3_0 = (RuleCall)cNewFieldAssignment_5_3.eContents().get(0);
		
		//TraitOperation:
		//	{TraitExclude} "exclude" method=[MethodName] | {TraitAlias} originalMethod=[MethodName] "aliasAs" newMethod=MethodName
		//	| {TraitMethodRename} originalMethod=[MethodName] "renameTo" newMethod=MethodName | {TraitMethodRename}
		//	originalMethod=[MethodName] "renameM" newMethod=MethodName | {TraitFieldRename} originalField=[FieldName]
		//	"renameFieldTo" newField=FieldName | {TraitFieldRename} originalField=[FieldName] "renameF" newField=FieldName;
		public ParserRule getRule() { return rule; }

		//{TraitExclude} "exclude" method=[MethodName] | {TraitAlias} originalMethod=[MethodName] "aliasAs" newMethod=MethodName |
		//{TraitMethodRename} originalMethod=[MethodName] "renameTo" newMethod=MethodName | {TraitMethodRename}
		//originalMethod=[MethodName] "renameM" newMethod=MethodName | {TraitFieldRename} originalField=[FieldName]
		//"renameFieldTo" newField=FieldName | {TraitFieldRename} originalField=[FieldName] "renameF" newField=FieldName
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TraitExclude} "exclude" method=[MethodName]
		public Group getGroup_0() { return cGroup_0; }

		//{TraitExclude}
		public Action getTraitExcludeAction_0_0() { return cTraitExcludeAction_0_0; }

		//"exclude"
		public Keyword getExcludeKeyword_0_1() { return cExcludeKeyword_0_1; }

		//method=[MethodName]
		public Assignment getMethodAssignment_0_2() { return cMethodAssignment_0_2; }

		//[MethodName]
		public CrossReference getMethodMethodNameCrossReference_0_2_0() { return cMethodMethodNameCrossReference_0_2_0; }

		//ID
		public RuleCall getMethodMethodNameIDTerminalRuleCall_0_2_0_1() { return cMethodMethodNameIDTerminalRuleCall_0_2_0_1; }

		//{TraitAlias} originalMethod=[MethodName] "aliasAs" newMethod=MethodName
		public Group getGroup_1() { return cGroup_1; }

		//{TraitAlias}
		public Action getTraitAliasAction_1_0() { return cTraitAliasAction_1_0; }

		//originalMethod=[MethodName]
		public Assignment getOriginalMethodAssignment_1_1() { return cOriginalMethodAssignment_1_1; }

		//[MethodName]
		public CrossReference getOriginalMethodMethodNameCrossReference_1_1_0() { return cOriginalMethodMethodNameCrossReference_1_1_0; }

		//ID
		public RuleCall getOriginalMethodMethodNameIDTerminalRuleCall_1_1_0_1() { return cOriginalMethodMethodNameIDTerminalRuleCall_1_1_0_1; }

		//"aliasAs"
		public Keyword getAliasAsKeyword_1_2() { return cAliasAsKeyword_1_2; }

		//newMethod=MethodName
		public Assignment getNewMethodAssignment_1_3() { return cNewMethodAssignment_1_3; }

		//MethodName
		public RuleCall getNewMethodMethodNameParserRuleCall_1_3_0() { return cNewMethodMethodNameParserRuleCall_1_3_0; }

		//{TraitMethodRename} originalMethod=[MethodName] "renameTo" newMethod=MethodName
		public Group getGroup_2() { return cGroup_2; }

		//{TraitMethodRename}
		public Action getTraitMethodRenameAction_2_0() { return cTraitMethodRenameAction_2_0; }

		//originalMethod=[MethodName]
		public Assignment getOriginalMethodAssignment_2_1() { return cOriginalMethodAssignment_2_1; }

		//[MethodName]
		public CrossReference getOriginalMethodMethodNameCrossReference_2_1_0() { return cOriginalMethodMethodNameCrossReference_2_1_0; }

		//ID
		public RuleCall getOriginalMethodMethodNameIDTerminalRuleCall_2_1_0_1() { return cOriginalMethodMethodNameIDTerminalRuleCall_2_1_0_1; }

		//"renameTo"
		public Keyword getRenameToKeyword_2_2() { return cRenameToKeyword_2_2; }

		//newMethod=MethodName
		public Assignment getNewMethodAssignment_2_3() { return cNewMethodAssignment_2_3; }

		//MethodName
		public RuleCall getNewMethodMethodNameParserRuleCall_2_3_0() { return cNewMethodMethodNameParserRuleCall_2_3_0; }

		//{TraitMethodRename} originalMethod=[MethodName] "renameM" newMethod=MethodName
		public Group getGroup_3() { return cGroup_3; }

		//{TraitMethodRename}
		public Action getTraitMethodRenameAction_3_0() { return cTraitMethodRenameAction_3_0; }

		//originalMethod=[MethodName]
		public Assignment getOriginalMethodAssignment_3_1() { return cOriginalMethodAssignment_3_1; }

		//[MethodName]
		public CrossReference getOriginalMethodMethodNameCrossReference_3_1_0() { return cOriginalMethodMethodNameCrossReference_3_1_0; }

		//ID
		public RuleCall getOriginalMethodMethodNameIDTerminalRuleCall_3_1_0_1() { return cOriginalMethodMethodNameIDTerminalRuleCall_3_1_0_1; }

		//"renameM"
		public Keyword getRenameMKeyword_3_2() { return cRenameMKeyword_3_2; }

		//newMethod=MethodName
		public Assignment getNewMethodAssignment_3_3() { return cNewMethodAssignment_3_3; }

		//MethodName
		public RuleCall getNewMethodMethodNameParserRuleCall_3_3_0() { return cNewMethodMethodNameParserRuleCall_3_3_0; }

		//{TraitFieldRename} originalField=[FieldName] "renameFieldTo" newField=FieldName
		public Group getGroup_4() { return cGroup_4; }

		//{TraitFieldRename}
		public Action getTraitFieldRenameAction_4_0() { return cTraitFieldRenameAction_4_0; }

		//originalField=[FieldName]
		public Assignment getOriginalFieldAssignment_4_1() { return cOriginalFieldAssignment_4_1; }

		//[FieldName]
		public CrossReference getOriginalFieldFieldNameCrossReference_4_1_0() { return cOriginalFieldFieldNameCrossReference_4_1_0; }

		//ID
		public RuleCall getOriginalFieldFieldNameIDTerminalRuleCall_4_1_0_1() { return cOriginalFieldFieldNameIDTerminalRuleCall_4_1_0_1; }

		//"renameFieldTo"
		public Keyword getRenameFieldToKeyword_4_2() { return cRenameFieldToKeyword_4_2; }

		//newField=FieldName
		public Assignment getNewFieldAssignment_4_3() { return cNewFieldAssignment_4_3; }

		//FieldName
		public RuleCall getNewFieldFieldNameParserRuleCall_4_3_0() { return cNewFieldFieldNameParserRuleCall_4_3_0; }

		//{TraitFieldRename} originalField=[FieldName] "renameF" newField=FieldName
		public Group getGroup_5() { return cGroup_5; }

		//{TraitFieldRename}
		public Action getTraitFieldRenameAction_5_0() { return cTraitFieldRenameAction_5_0; }

		//originalField=[FieldName]
		public Assignment getOriginalFieldAssignment_5_1() { return cOriginalFieldAssignment_5_1; }

		//[FieldName]
		public CrossReference getOriginalFieldFieldNameCrossReference_5_1_0() { return cOriginalFieldFieldNameCrossReference_5_1_0; }

		//ID
		public RuleCall getOriginalFieldFieldNameIDTerminalRuleCall_5_1_0_1() { return cOriginalFieldFieldNameIDTerminalRuleCall_5_1_0_1; }

		//"renameF"
		public Keyword getRenameFKeyword_5_2() { return cRenameFKeyword_5_2; }

		//newField=FieldName
		public Assignment getNewFieldAssignment_5_3() { return cNewFieldAssignment_5_3; }

		//FieldName
		public RuleCall getNewFieldFieldNameParserRuleCall_5_3_0() { return cNewFieldFieldNameParserRuleCall_5_3_0; }
	}

	public class TraitElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraitElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequiredFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProvidedMethodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TraitElement:
		//	RequiredField | RequiredMethod | ProvidedMethod;
		public ParserRule getRule() { return rule; }

		//RequiredField | RequiredMethod | ProvidedMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//RequiredField
		public RuleCall getRequiredFieldParserRuleCall_0() { return cRequiredFieldParserRuleCall_0; }

		//RequiredMethod
		public RuleCall getRequiredMethodParserRuleCall_1() { return cRequiredMethodParserRuleCall_1; }

		//ProvidedMethod
		public RuleCall getProvidedMethodParserRuleCall_2() { return cProvidedMethodParserRuleCall_2; }
	}

	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFieldDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cModifierAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cModifierTransientKeyword_1_0_0 = (Keyword)cModifierAssignment_1_0.eContents().get(0);
		private final Assignment cModifierAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cModifierVolatileKeyword_1_1_0 = (Keyword)cModifierAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cFieldRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldRefFieldNameParserRuleCall_3_0 = (RuleCall)cFieldRefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *Variable and method declarations* / FieldDeclaration returns Field:
		//	{FieldDeclaration} (modifier="transient" | modifier="volatile")? type=Type fieldRef=FieldName ";";
		public ParserRule getRule() { return rule; }

		//{FieldDeclaration} (modifier="transient" | modifier="volatile")? type=Type fieldRef=FieldName ";"
		public Group getGroup() { return cGroup; }

		//{FieldDeclaration}
		public Action getFieldDeclarationAction_0() { return cFieldDeclarationAction_0; }

		//(modifier="transient" | modifier="volatile")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//modifier="transient"
		public Assignment getModifierAssignment_1_0() { return cModifierAssignment_1_0; }

		//"transient"
		public Keyword getModifierTransientKeyword_1_0_0() { return cModifierTransientKeyword_1_0_0; }

		//modifier="volatile"
		public Assignment getModifierAssignment_1_1() { return cModifierAssignment_1_1; }

		//"volatile"
		public Keyword getModifierVolatileKeyword_1_1_0() { return cModifierVolatileKeyword_1_1_0; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//fieldRef=FieldName
		public Assignment getFieldRefAssignment_3() { return cFieldRefAssignment_3; }

		//FieldName
		public RuleCall getFieldRefFieldNameParserRuleCall_3_0() { return cFieldRefFieldNameParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RequiredFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequiredFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cFieldRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldRefFieldNameParserRuleCall_2_0 = (RuleCall)cFieldRefAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RequiredField returns Field:
		//	{RequiredField} type=Type fieldRef=FieldName ";";
		public ParserRule getRule() { return rule; }

		//{RequiredField} type=Type fieldRef=FieldName ";"
		public Group getGroup() { return cGroup; }

		//{RequiredField}
		public Action getRequiredFieldAction_0() { return cRequiredFieldAction_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//fieldRef=FieldName
		public Assignment getFieldRefAssignment_2() { return cFieldRefAssignment_2; }

		//FieldName
		public RuleCall getFieldRefFieldNameParserRuleCall_2_0() { return cFieldRefFieldNameParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RequiredMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequiredMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cMethodRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodRefMethodNameParserRuleCall_2_0 = (RuleCall)cMethodRefAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParameterListAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParameterListParameterParserRuleCall_4_0_0 = (RuleCall)cParameterListAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParameterListAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParameterListParameterParserRuleCall_4_1_1_0 = (RuleCall)cParameterListAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RequiredMethod returns Method:
		//	{RequiredMethod} returnType=ReturnType methodRef=MethodName "(" (parameterList+=Parameter (","
		//	parameterList+=Parameter)*)? ")" ";";
		public ParserRule getRule() { return rule; }

		//{RequiredMethod} returnType=ReturnType methodRef=MethodName "(" (parameterList+=Parameter (","
		//parameterList+=Parameter)*)? ")" ";"
		public Group getGroup() { return cGroup; }

		//{RequiredMethod}
		public Action getRequiredMethodAction_0() { return cRequiredMethodAction_0; }

		//returnType=ReturnType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }

		//ReturnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_1_0() { return cReturnTypeReturnTypeParserRuleCall_1_0; }

		//methodRef=MethodName
		public Assignment getMethodRefAssignment_2() { return cMethodRefAssignment_2; }

		//MethodName
		public RuleCall getMethodRefMethodNameParserRuleCall_2_0() { return cMethodRefMethodNameParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameterList+=Parameter ("," parameterList+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameterList+=Parameter
		public Assignment getParameterListAssignment_4_0() { return cParameterListAssignment_4_0; }

		//Parameter
		public RuleCall getParameterListParameterParserRuleCall_4_0_0() { return cParameterListParameterParserRuleCall_4_0_0; }

		//("," parameterList+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameterList+=Parameter
		public Assignment getParameterListAssignment_4_1_1() { return cParameterListAssignment_4_1_1; }

		//Parameter
		public RuleCall getParameterListParameterParserRuleCall_4_1_1_0() { return cParameterListParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ProvidedMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidedMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProvidedMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsSynchronizedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsSynchronizedSynchronizedKeyword_1_0 = (Keyword)cIsSynchronizedAssignment_1.eContents().get(0);
		private final Assignment cReturnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_2_0 = (RuleCall)cReturnTypeAssignment_2.eContents().get(0);
		private final Assignment cMethodRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodRefMethodNameParserRuleCall_3_0 = (RuleCall)cMethodRefAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParameterListAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParameterListParameterParserRuleCall_5_0_0 = (RuleCall)cParameterListAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParameterListAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParameterListParameterParserRuleCall_5_1_1_0 = (RuleCall)cParameterListAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		private final Assignment cReturnStatementAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cReturnStatementReturnStatementParserRuleCall_9_0 = (RuleCall)cReturnStatementAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ProvidedMethod returns Method:
		//	{ProvidedMethod} isSynchronized?="synchronized"? returnType=ReturnType methodRef=MethodName "("
		//	(parameterList+=Parameter ("," parameterList+=Parameter)*)? ")" "{" block=Block returnStatement=ReturnStatement? "}";
		public ParserRule getRule() { return rule; }

		//{ProvidedMethod} isSynchronized?="synchronized"? returnType=ReturnType methodRef=MethodName "("
		//(parameterList+=Parameter ("," parameterList+=Parameter)*)? ")" "{" block=Block returnStatement=ReturnStatement? "}"
		public Group getGroup() { return cGroup; }

		//{ProvidedMethod}
		public Action getProvidedMethodAction_0() { return cProvidedMethodAction_0; }

		//isSynchronized?="synchronized"?
		public Assignment getIsSynchronizedAssignment_1() { return cIsSynchronizedAssignment_1; }

		//"synchronized"
		public Keyword getIsSynchronizedSynchronizedKeyword_1_0() { return cIsSynchronizedSynchronizedKeyword_1_0; }

		//returnType=ReturnType
		public Assignment getReturnTypeAssignment_2() { return cReturnTypeAssignment_2; }

		//ReturnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_2_0() { return cReturnTypeReturnTypeParserRuleCall_2_0; }

		//methodRef=MethodName
		public Assignment getMethodRefAssignment_3() { return cMethodRefAssignment_3; }

		//MethodName
		public RuleCall getMethodRefMethodNameParserRuleCall_3_0() { return cMethodRefMethodNameParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameterList+=Parameter ("," parameterList+=Parameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameterList+=Parameter
		public Assignment getParameterListAssignment_5_0() { return cParameterListAssignment_5_0; }

		//Parameter
		public RuleCall getParameterListParameterParserRuleCall_5_0_0() { return cParameterListParameterParserRuleCall_5_0_0; }

		//("," parameterList+=Parameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameterList+=Parameter
		public Assignment getParameterListAssignment_5_1_1() { return cParameterListAssignment_5_1_1; }

		//Parameter
		public RuleCall getParameterListParameterParserRuleCall_5_1_1_0() { return cParameterListParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//block=Block
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_8_0() { return cBlockBlockParserRuleCall_8_0; }

		//returnStatement=ReturnStatement?
		public Assignment getReturnStatementAssignment_9() { return cReturnStatementAssignment_9; }

		//ReturnStatement
		public RuleCall getReturnStatementReturnStatementParserRuleCall_9_0() { return cReturnStatementReturnStatementParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterListParameterParserRuleCall_2_0_0 = (RuleCall)cParameterListAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterListParameterParserRuleCall_2_1_1_0 = (RuleCall)cParameterListAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Constructor:
		//	name=ID "(" (parameterList+=Parameter ("," parameterList+=Parameter)*)? ")" "{" block=Block "}";
		public ParserRule getRule() { return rule; }

		//name=ID "(" (parameterList+=Parameter ("," parameterList+=Parameter)*)? ")" "{" block=Block "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameterList+=Parameter ("," parameterList+=Parameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameterList+=Parameter
		public Assignment getParameterListAssignment_2_0() { return cParameterListAssignment_2_0; }

		//Parameter
		public RuleCall getParameterListParameterParserRuleCall_2_0_0() { return cParameterListParameterParserRuleCall_2_0_0; }

		//("," parameterList+=Parameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameterList+=Parameter
		public Assignment getParameterListAssignment_2_1_1() { return cParameterListAssignment_2_1_1; }

		//Parameter
		public RuleCall getParameterListParameterParserRuleCall_2_1_1_0() { return cParameterListParameterParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//block=Block
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_5_0() { return cBlockBlockParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnStatement:
		//	"return" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//"return" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//	{FormalParameter} type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//{FormalParameter} type=Type name=ID
		public Group getGroup() { return cGroup; }

		//{FormalParameter}
		public Action getFormalParameterAction_0() { return cFormalParameterAction_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FieldName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MethodName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInterfaceTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cInterfaceTypeInterfaceCrossReference_0_0 = (CrossReference)cInterfaceTypeAssignment_0.eContents().get(0);
		private final RuleCall cInterfaceTypeInterfaceIDTerminalRuleCall_0_0_1 = (RuleCall)cInterfaceTypeInterfaceCrossReference_0_0.eContents().get(1);
		private final Assignment cPrimitiveTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cPrimitiveTypeByteKeyword_1_0 = (Keyword)cPrimitiveTypeAssignment_1.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPrimitiveTypeCharKeyword_2_0 = (Keyword)cPrimitiveTypeAssignment_2.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cPrimitiveTypeBooleanKeyword_3_0 = (Keyword)cPrimitiveTypeAssignment_3.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cPrimitiveTypeShortKeyword_4_0 = (Keyword)cPrimitiveTypeAssignment_4.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cPrimitiveTypeIntKeyword_5_0 = (Keyword)cPrimitiveTypeAssignment_5.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cPrimitiveTypeLongKeyword_6_0 = (Keyword)cPrimitiveTypeAssignment_6.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cPrimitiveTypeFloatKeyword_7_0 = (Keyword)cPrimitiveTypeAssignment_7.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cPrimitiveTypeDoubleKeyword_8_0 = (Keyword)cPrimitiveTypeAssignment_8.eContents().get(0);
		
		//Type:
		//	interfaceType=[Interface] | //javaType=[types::JvmType] |
		//	primitiveType="byte" | primitiveType="char" | primitiveType="boolean" | primitiveType="short" | primitiveType="int" |
		//	primitiveType="long" | primitiveType="float" | primitiveType="double";
		public ParserRule getRule() { return rule; }

		//interfaceType=[Interface] | //javaType=[types::JvmType] |
		//primitiveType="byte" | primitiveType="char" | primitiveType="boolean" | primitiveType="short" | primitiveType="int" |
		//primitiveType="long" | primitiveType="float" | primitiveType="double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//interfaceType=[Interface]
		public Assignment getInterfaceTypeAssignment_0() { return cInterfaceTypeAssignment_0; }

		//[Interface]
		public CrossReference getInterfaceTypeInterfaceCrossReference_0_0() { return cInterfaceTypeInterfaceCrossReference_0_0; }

		//ID
		public RuleCall getInterfaceTypeInterfaceIDTerminalRuleCall_0_0_1() { return cInterfaceTypeInterfaceIDTerminalRuleCall_0_0_1; }

		////javaType=[types::JvmType] |
		//primitiveType="byte"
		public Assignment getPrimitiveTypeAssignment_1() { return cPrimitiveTypeAssignment_1; }

		//"byte"
		public Keyword getPrimitiveTypeByteKeyword_1_0() { return cPrimitiveTypeByteKeyword_1_0; }

		//primitiveType="char"
		public Assignment getPrimitiveTypeAssignment_2() { return cPrimitiveTypeAssignment_2; }

		//"char"
		public Keyword getPrimitiveTypeCharKeyword_2_0() { return cPrimitiveTypeCharKeyword_2_0; }

		//primitiveType="boolean"
		public Assignment getPrimitiveTypeAssignment_3() { return cPrimitiveTypeAssignment_3; }

		//"boolean"
		public Keyword getPrimitiveTypeBooleanKeyword_3_0() { return cPrimitiveTypeBooleanKeyword_3_0; }

		//primitiveType="short"
		public Assignment getPrimitiveTypeAssignment_4() { return cPrimitiveTypeAssignment_4; }

		//"short"
		public Keyword getPrimitiveTypeShortKeyword_4_0() { return cPrimitiveTypeShortKeyword_4_0; }

		//primitiveType="int"
		public Assignment getPrimitiveTypeAssignment_5() { return cPrimitiveTypeAssignment_5; }

		//"int"
		public Keyword getPrimitiveTypeIntKeyword_5_0() { return cPrimitiveTypeIntKeyword_5_0; }

		//primitiveType="long"
		public Assignment getPrimitiveTypeAssignment_6() { return cPrimitiveTypeAssignment_6; }

		//"long"
		public Keyword getPrimitiveTypeLongKeyword_6_0() { return cPrimitiveTypeLongKeyword_6_0; }

		//primitiveType="float"
		public Assignment getPrimitiveTypeAssignment_7() { return cPrimitiveTypeAssignment_7; }

		//"float"
		public Keyword getPrimitiveTypeFloatKeyword_7_0() { return cPrimitiveTypeFloatKeyword_7_0; }

		//primitiveType="double"
		public Assignment getPrimitiveTypeAssignment_8() { return cPrimitiveTypeAssignment_8; }

		//"double"
		public Keyword getPrimitiveTypeDoubleKeyword_8_0() { return cPrimitiveTypeDoubleKeyword_8_0; }
	}

	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInterfaceTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cInterfaceTypeInterfaceCrossReference_0_0 = (CrossReference)cInterfaceTypeAssignment_0.eContents().get(0);
		private final RuleCall cInterfaceTypeInterfaceIDTerminalRuleCall_0_0_1 = (RuleCall)cInterfaceTypeInterfaceCrossReference_0_0.eContents().get(1);
		private final Assignment cPrimitiveTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cPrimitiveTypeByteKeyword_1_0 = (Keyword)cPrimitiveTypeAssignment_1.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPrimitiveTypeCharKeyword_2_0 = (Keyword)cPrimitiveTypeAssignment_2.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cPrimitiveTypeBooleanKeyword_3_0 = (Keyword)cPrimitiveTypeAssignment_3.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cPrimitiveTypeShortKeyword_4_0 = (Keyword)cPrimitiveTypeAssignment_4.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cPrimitiveTypeIntKeyword_5_0 = (Keyword)cPrimitiveTypeAssignment_5.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cPrimitiveTypeLongKeyword_6_0 = (Keyword)cPrimitiveTypeAssignment_6.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cPrimitiveTypeFloatKeyword_7_0 = (Keyword)cPrimitiveTypeAssignment_7.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cPrimitiveTypeDoubleKeyword_8_0 = (Keyword)cPrimitiveTypeAssignment_8.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cPrimitiveTypeVoidKeyword_9_0 = (Keyword)cPrimitiveTypeAssignment_9.eContents().get(0);
		
		//ReturnType returns Type:
		//	interfaceType=[Interface] | //javaType=[types::JvmType] |
		//	primitiveType="byte" | primitiveType="char" | primitiveType="boolean" | primitiveType="short" | primitiveType="int" |
		//	primitiveType="long" | primitiveType="float" | primitiveType="double" | primitiveType="void";
		public ParserRule getRule() { return rule; }

		//interfaceType=[Interface] | //javaType=[types::JvmType] |
		//primitiveType="byte" | primitiveType="char" | primitiveType="boolean" | primitiveType="short" | primitiveType="int" |
		//primitiveType="long" | primitiveType="float" | primitiveType="double" | primitiveType="void"
		public Alternatives getAlternatives() { return cAlternatives; }

		//interfaceType=[Interface]
		public Assignment getInterfaceTypeAssignment_0() { return cInterfaceTypeAssignment_0; }

		//[Interface]
		public CrossReference getInterfaceTypeInterfaceCrossReference_0_0() { return cInterfaceTypeInterfaceCrossReference_0_0; }

		//ID
		public RuleCall getInterfaceTypeInterfaceIDTerminalRuleCall_0_0_1() { return cInterfaceTypeInterfaceIDTerminalRuleCall_0_0_1; }

		////javaType=[types::JvmType] |
		//primitiveType="byte"
		public Assignment getPrimitiveTypeAssignment_1() { return cPrimitiveTypeAssignment_1; }

		//"byte"
		public Keyword getPrimitiveTypeByteKeyword_1_0() { return cPrimitiveTypeByteKeyword_1_0; }

		//primitiveType="char"
		public Assignment getPrimitiveTypeAssignment_2() { return cPrimitiveTypeAssignment_2; }

		//"char"
		public Keyword getPrimitiveTypeCharKeyword_2_0() { return cPrimitiveTypeCharKeyword_2_0; }

		//primitiveType="boolean"
		public Assignment getPrimitiveTypeAssignment_3() { return cPrimitiveTypeAssignment_3; }

		//"boolean"
		public Keyword getPrimitiveTypeBooleanKeyword_3_0() { return cPrimitiveTypeBooleanKeyword_3_0; }

		//primitiveType="short"
		public Assignment getPrimitiveTypeAssignment_4() { return cPrimitiveTypeAssignment_4; }

		//"short"
		public Keyword getPrimitiveTypeShortKeyword_4_0() { return cPrimitiveTypeShortKeyword_4_0; }

		//primitiveType="int"
		public Assignment getPrimitiveTypeAssignment_5() { return cPrimitiveTypeAssignment_5; }

		//"int"
		public Keyword getPrimitiveTypeIntKeyword_5_0() { return cPrimitiveTypeIntKeyword_5_0; }

		//primitiveType="long"
		public Assignment getPrimitiveTypeAssignment_6() { return cPrimitiveTypeAssignment_6; }

		//"long"
		public Keyword getPrimitiveTypeLongKeyword_6_0() { return cPrimitiveTypeLongKeyword_6_0; }

		//primitiveType="float"
		public Assignment getPrimitiveTypeAssignment_7() { return cPrimitiveTypeAssignment_7; }

		//"float"
		public Keyword getPrimitiveTypeFloatKeyword_7_0() { return cPrimitiveTypeFloatKeyword_7_0; }

		//primitiveType="double"
		public Assignment getPrimitiveTypeAssignment_8() { return cPrimitiveTypeAssignment_8; }

		//"double"
		public Keyword getPrimitiveTypeDoubleKeyword_8_0() { return cPrimitiveTypeDoubleKeyword_8_0; }

		//primitiveType="void"
		public Assignment getPrimitiveTypeAssignment_9() { return cPrimitiveTypeAssignment_9; }

		//"void"
		public Keyword getPrimitiveTypeVoidKeyword_9_0() { return cPrimitiveTypeVoidKeyword_9_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterListLocalParameterParserRuleCall_1_0 = (RuleCall)cParameterListAssignment_1.eContents().get(0);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		/// *Method implementation* / Block:
		//	{Block} parameterList+=LocalParameter* statementList+=Statement*;
		public ParserRule getRule() { return rule; }

		//{Block} parameterList+=LocalParameter* statementList+=Statement*
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//parameterList+=LocalParameter*
		public Assignment getParameterListAssignment_1() { return cParameterListAssignment_1; }

		//LocalParameter
		public RuleCall getParameterListLocalParameterParserRuleCall_1_0() { return cParameterListLocalParameterParserRuleCall_1_0; }

		//statementList+=Statement*
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }

		//Statement
		public RuleCall getStatementListStatementParserRuleCall_2_0() { return cStatementListStatementParserRuleCall_2_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfThenElseStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	ExpressionStatement | IfThenElseStatement | WhileStatement;
		public ParserRule getRule() { return rule; }

		//ExpressionStatement | IfThenElseStatement | WhileStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_0() { return cExpressionStatementParserRuleCall_0; }

		//IfThenElseStatement
		public RuleCall getIfThenElseStatementParserRuleCall_1() { return cIfThenElseStatementParserRuleCall_1; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_2() { return cWhileStatementParserRuleCall_2; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExpressionStatement:
		//	expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class IfThenElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThenElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondictionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondictionBooleanExpressionParserRuleCall_2_0 = (RuleCall)cCondictionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTrueBranchAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTrueBranchBlockParserRuleCall_5_0 = (RuleCall)cTrueBranchAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFalseBranchAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFalseBranchBlockParserRuleCall_7_2_0 = (RuleCall)cFalseBranchAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//IfThenElseStatement:
		//	"if" "(" condiction=BooleanExpression ")" "{" trueBranch=Block "}" ("else" "{" falseBranch=Block "}")?;
		public ParserRule getRule() { return rule; }

		//"if" "(" condiction=BooleanExpression ")" "{" trueBranch=Block "}" ("else" "{" falseBranch=Block "}")?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condiction=BooleanExpression
		public Assignment getCondictionAssignment_2() { return cCondictionAssignment_2; }

		//BooleanExpression
		public RuleCall getCondictionBooleanExpressionParserRuleCall_2_0() { return cCondictionBooleanExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//trueBranch=Block
		public Assignment getTrueBranchAssignment_5() { return cTrueBranchAssignment_5; }

		//Block
		public RuleCall getTrueBranchBlockParserRuleCall_5_0() { return cTrueBranchBlockParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//("else" "{" falseBranch=Block "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"else"
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//falseBranch=Block
		public Assignment getFalseBranchAssignment_7_2() { return cFalseBranchAssignment_7_2; }

		//Block
		public RuleCall getFalseBranchBlockParserRuleCall_7_2_0() { return cFalseBranchBlockParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondictionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondictionBooleanExpressionParserRuleCall_2_0 = (RuleCall)cCondictionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWhileBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWhileBlockBlockParserRuleCall_5_0 = (RuleCall)cWhileBlockAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WhileStatement:
		//	"while" "(" condiction=BooleanExpression ")" "{" whileBlock=Block "}";
		public ParserRule getRule() { return rule; }

		//"while" "(" condiction=BooleanExpression ")" "{" whileBlock=Block "}"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condiction=BooleanExpression
		public Assignment getCondictionAssignment_2() { return cCondictionAssignment_2; }

		//BooleanExpression
		public RuleCall getCondictionBooleanExpressionParserRuleCall_2_0() { return cCondictionBooleanExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//whileBlock=Block
		public Assignment getWhileBlockAssignment_5() { return cWhileBlockAssignment_5; }

		//Block
		public RuleCall getWhileBlockBlockParserRuleCall_5_0() { return cWhileBlockBlockParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAtomicListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomicListAtomicBooleanExpressionParserRuleCall_1_0 = (RuleCall)cAtomicListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBooleanOperatorListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBooleanOperatorListBooleanOperatorParserRuleCall_2_0_0 = (RuleCall)cBooleanOperatorListAssignment_2_0.eContents().get(0);
		private final Assignment cAtomicListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAtomicListAtomicBooleanExpressionParserRuleCall_2_1_0 = (RuleCall)cAtomicListAssignment_2_1.eContents().get(0);
		
		////Boolean expressions
		//BooleanExpression returns GenericExpression:
		//	{BooleanExpression} atomicList+=AtomicBooleanExpression (booleanOperatorList+=BooleanOperator
		//	atomicList+=AtomicBooleanExpression)*;
		public ParserRule getRule() { return rule; }

		//{BooleanExpression} atomicList+=AtomicBooleanExpression (booleanOperatorList+=BooleanOperator
		//atomicList+=AtomicBooleanExpression)*
		public Group getGroup() { return cGroup; }

		//{BooleanExpression}
		public Action getBooleanExpressionAction_0() { return cBooleanExpressionAction_0; }

		//atomicList+=AtomicBooleanExpression
		public Assignment getAtomicListAssignment_1() { return cAtomicListAssignment_1; }

		//AtomicBooleanExpression
		public RuleCall getAtomicListAtomicBooleanExpressionParserRuleCall_1_0() { return cAtomicListAtomicBooleanExpressionParserRuleCall_1_0; }

		//(booleanOperatorList+=BooleanOperator atomicList+=AtomicBooleanExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//booleanOperatorList+=BooleanOperator
		public Assignment getBooleanOperatorListAssignment_2_0() { return cBooleanOperatorListAssignment_2_0; }

		//BooleanOperator
		public RuleCall getBooleanOperatorListBooleanOperatorParserRuleCall_2_0_0() { return cBooleanOperatorListBooleanOperatorParserRuleCall_2_0_0; }

		//atomicList+=AtomicBooleanExpression
		public Assignment getAtomicListAssignment_2_1() { return cAtomicListAssignment_2_1; }

		//AtomicBooleanExpression
		public RuleCall getAtomicListAtomicBooleanExpressionParserRuleCall_2_1_0() { return cAtomicListAtomicBooleanExpressionParserRuleCall_2_1_0; }
	}

	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cOperatorAmpersandKeyword_0_0 = (Keyword)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_0 = (Keyword)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cOperatorVerticalLineKeyword_2_0 = (Keyword)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cOperatorAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_3_0 = (Keyword)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cOperatorAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cOperatorCircumflexAccentKeyword_4_0 = (Keyword)cOperatorAssignment_4.eContents().get(0);
		
		//BooleanOperator:
		//	operator="&" | operator="&&" | operator="|" | operator="||" | operator="^";
		public ParserRule getRule() { return rule; }

		//operator="&" | operator="&&" | operator="|" | operator="||" | operator="^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//operator="&"
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//"&"
		public Keyword getOperatorAmpersandKeyword_0_0() { return cOperatorAmpersandKeyword_0_0; }

		//operator="&&"
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//"&&"
		public Keyword getOperatorAmpersandAmpersandKeyword_1_0() { return cOperatorAmpersandAmpersandKeyword_1_0; }

		//operator="|"
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//"|"
		public Keyword getOperatorVerticalLineKeyword_2_0() { return cOperatorVerticalLineKeyword_2_0; }

		//operator="||"
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//"||"
		public Keyword getOperatorVerticalLineVerticalLineKeyword_3_0() { return cOperatorVerticalLineVerticalLineKeyword_3_0; }

		//operator="^"
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }

		//"^"
		public Keyword getOperatorCircumflexAccentKeyword_4_0() { return cOperatorCircumflexAccentKeyword_4_0; }
	}

	public class AtomicBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicBooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleComparationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNestedBooleanExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AtomicBooleanExpression:
		//	SimpleComparation | NestedBooleanExpression;
		public ParserRule getRule() { return rule; }

		//SimpleComparation | NestedBooleanExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleComparation
		public RuleCall getSimpleComparationParserRuleCall_0() { return cSimpleComparationParserRuleCall_0; }

		//NestedBooleanExpression
		public RuleCall getNestedBooleanExpressionParserRuleCall_1() { return cNestedBooleanExpressionParserRuleCall_1; }
	}

	public class SimpleComparationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleComparation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Assignment cLeftExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionExpressionParserRuleCall_1_0 = (RuleCall)cLeftExpressionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCompareAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCompareCompareOperatorParserRuleCall_2_0_0 = (RuleCall)cCompareAssignment_2_0.eContents().get(0);
		private final Assignment cRightExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cRightExpressionAssignment_2_1.eContents().get(0);
		
		//SimpleComparation:
		//	negated?="!"? leftExpression=Expression (compare=CompareOperator rightExpression=Expression)?;
		public ParserRule getRule() { return rule; }

		//negated?="!"? leftExpression=Expression (compare=CompareOperator rightExpression=Expression)?
		public Group getGroup() { return cGroup; }

		//negated?="!"?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }

		//"!"
		public Keyword getNegatedExclamationMarkKeyword_0_0() { return cNegatedExclamationMarkKeyword_0_0; }

		//leftExpression=Expression
		public Assignment getLeftExpressionAssignment_1() { return cLeftExpressionAssignment_1; }

		//Expression
		public RuleCall getLeftExpressionExpressionParserRuleCall_1_0() { return cLeftExpressionExpressionParserRuleCall_1_0; }

		//(compare=CompareOperator rightExpression=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//compare=CompareOperator
		public Assignment getCompareAssignment_2_0() { return cCompareAssignment_2_0; }

		//CompareOperator
		public RuleCall getCompareCompareOperatorParserRuleCall_2_0_0() { return cCompareCompareOperatorParserRuleCall_2_0_0; }

		//rightExpression=Expression
		public Assignment getRightExpressionAssignment_2_1() { return cRightExpressionAssignment_2_1; }

		//Expression
		public RuleCall getRightExpressionExpressionParserRuleCall_2_1_0() { return cRightExpressionExpressionParserRuleCall_2_1_0; }
	}

	public class NestedBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedBooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNestedExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNestedExpressionBooleanExpressionParserRuleCall_2_0 = (RuleCall)cNestedExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NestedBooleanExpression:
		//	negated?="!"? "(" nestedExpression=BooleanExpression ")";
		public ParserRule getRule() { return rule; }

		//negated?="!"? "(" nestedExpression=BooleanExpression ")"
		public Group getGroup() { return cGroup; }

		//negated?="!"?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }

		//"!"
		public Keyword getNegatedExclamationMarkKeyword_0_0() { return cNegatedExclamationMarkKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//nestedExpression=BooleanExpression
		public Assignment getNestedExpressionAssignment_2() { return cNestedExpressionAssignment_2; }

		//BooleanExpression
		public RuleCall getNestedExpressionBooleanExpressionParserRuleCall_2_0() { return cNestedExpressionBooleanExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CompareOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_0_0 = (Keyword)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_0 = (Keyword)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_2_0 = (Keyword)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cOperatorAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cOperatorAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cOperatorGreaterThanSignKeyword_4_0 = (Keyword)cOperatorAssignment_4.eContents().get(0);
		private final Assignment cOperatorAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cOperatorAssignment_5.eContents().get(0);
		
		//CompareOperator:
		//	operator="<" | operator="<=" | operator="==" | operator="!=" | operator=">" | operator=">=";
		public ParserRule getRule() { return rule; }

		//operator="<" | operator="<=" | operator="==" | operator="!=" | operator=">" | operator=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//operator="<"
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//"<"
		public Keyword getOperatorLessThanSignKeyword_0_0() { return cOperatorLessThanSignKeyword_0_0; }

		//operator="<="
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_0() { return cOperatorLessThanSignEqualsSignKeyword_1_0; }

		//operator="=="
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//"=="
		public Keyword getOperatorEqualsSignEqualsSignKeyword_2_0() { return cOperatorEqualsSignEqualsSignKeyword_2_0; }

		//operator="!="
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//"!="
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_3_0() { return cOperatorExclamationMarkEqualsSignKeyword_3_0; }

		//operator=">"
		public Assignment getOperatorAssignment_4() { return cOperatorAssignment_4; }

		//">"
		public Keyword getOperatorGreaterThanSignKeyword_4_0() { return cOperatorGreaterThanSignKeyword_4_0; }

		//operator=">="
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }

		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_5_0() { return cOperatorGreaterThanSignEqualsSignKeyword_5_0; }
	}

	public class LocalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLocalParameterAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_0_4_0 = (RuleCall)cValueAssignment_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLocalParameterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cValueBooleanExpressionParserRuleCall_1_4_0 = (RuleCall)cValueAssignment_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		////Expressions
		//LocalParameter returns Parameter:
		//	{LocalParameter} type=Type name=ID "=" value=Expression ";" | {LocalParameter} type=Type name=ID "="
		//	value=BooleanExpression ";";
		public ParserRule getRule() { return rule; }

		//{LocalParameter} type=Type name=ID "=" value=Expression ";" | {LocalParameter} type=Type name=ID "="
		//value=BooleanExpression ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LocalParameter} type=Type name=ID "=" value=Expression ";"
		public Group getGroup_0() { return cGroup_0; }

		//{LocalParameter}
		public Action getLocalParameterAction_0_0() { return cLocalParameterAction_0_0; }

		//type=Type
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_1_0() { return cTypeTypeParserRuleCall_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_3() { return cEqualsSignKeyword_0_3; }

		//value=Expression
		public Assignment getValueAssignment_0_4() { return cValueAssignment_0_4; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_4_0() { return cValueExpressionParserRuleCall_0_4_0; }

		//";"
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//{LocalParameter} type=Type name=ID "=" value=BooleanExpression ";"
		public Group getGroup_1() { return cGroup_1; }

		//{LocalParameter}
		public Action getLocalParameterAction_1_0() { return cLocalParameterAction_1_0; }

		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//value=BooleanExpression
		public Assignment getValueAssignment_1_4() { return cValueAssignment_1_4; }

		//BooleanExpression
		public RuleCall getValueBooleanExpressionParserRuleCall_1_4_0() { return cValueBooleanExpressionParserRuleCall_1_4_0; }

		//";"
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSignAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cSignHyphenMinusKeyword_1_0_0 = (Keyword)cSignAssignment_1_0.eContents().get(0);
		private final Assignment cSignAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSignPlusSignKeyword_1_1_0 = (Keyword)cSignAssignment_1_1.eContents().get(0);
		private final Assignment cTermListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermListDottedExpressionParserRuleCall_2_0 = (RuleCall)cTermListAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOperatorListAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cOperatorListAlternatives_3_0_0 = (Alternatives)cOperatorListAssignment_3_0.eContents().get(0);
		private final Keyword cOperatorListPlusSignKeyword_3_0_0_0 = (Keyword)cOperatorListAlternatives_3_0_0.eContents().get(0);
		private final Keyword cOperatorListHyphenMinusKeyword_3_0_0_1 = (Keyword)cOperatorListAlternatives_3_0_0.eContents().get(1);
		private final Keyword cOperatorListAsteriskKeyword_3_0_0_2 = (Keyword)cOperatorListAlternatives_3_0_0.eContents().get(2);
		private final Keyword cOperatorListSolidusKeyword_3_0_0_3 = (Keyword)cOperatorListAlternatives_3_0_0.eContents().get(3);
		private final Keyword cOperatorListPercentSignKeyword_3_0_0_4 = (Keyword)cOperatorListAlternatives_3_0_0.eContents().get(4);
		private final Assignment cTermListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTermListDottedExpressionParserRuleCall_3_1_0 = (RuleCall)cTermListAssignment_3_1.eContents().get(0);
		
		//Expression returns GenericExpression:
		//	{Expression} (sign="-" | sign="+")? termList+=DottedExpression (operatorList+=("+" | "-" | "*" | "/" | "%")
		//	termList+=DottedExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} (sign="-" | sign="+")? termList+=DottedExpression (operatorList+=("+" | "-" | "*" | "/" | "%")
		//termList+=DottedExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//(sign="-" | sign="+")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//sign="-"
		public Assignment getSignAssignment_1_0() { return cSignAssignment_1_0; }

		//"-"
		public Keyword getSignHyphenMinusKeyword_1_0_0() { return cSignHyphenMinusKeyword_1_0_0; }

		//sign="+"
		public Assignment getSignAssignment_1_1() { return cSignAssignment_1_1; }

		//"+"
		public Keyword getSignPlusSignKeyword_1_1_0() { return cSignPlusSignKeyword_1_1_0; }

		//termList+=DottedExpression
		public Assignment getTermListAssignment_2() { return cTermListAssignment_2; }

		//DottedExpression
		public RuleCall getTermListDottedExpressionParserRuleCall_2_0() { return cTermListDottedExpressionParserRuleCall_2_0; }

		//(operatorList+=("+" | "-" | "*" | "/" | "%") termList+=DottedExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//operatorList+=("+" | "-" | "*" | "/" | "%")
		public Assignment getOperatorListAssignment_3_0() { return cOperatorListAssignment_3_0; }

		//"+" | "-" | "*" | "/" | "%"
		public Alternatives getOperatorListAlternatives_3_0_0() { return cOperatorListAlternatives_3_0_0; }

		//"+"
		public Keyword getOperatorListPlusSignKeyword_3_0_0_0() { return cOperatorListPlusSignKeyword_3_0_0_0; }

		//"-"
		public Keyword getOperatorListHyphenMinusKeyword_3_0_0_1() { return cOperatorListHyphenMinusKeyword_3_0_0_1; }

		//"*"
		public Keyword getOperatorListAsteriskKeyword_3_0_0_2() { return cOperatorListAsteriskKeyword_3_0_0_2; }

		//"/"
		public Keyword getOperatorListSolidusKeyword_3_0_0_3() { return cOperatorListSolidusKeyword_3_0_0_3; }

		//"%"
		public Keyword getOperatorListPercentSignKeyword_3_0_0_4() { return cOperatorListPercentSignKeyword_3_0_0_4; }

		//termList+=DottedExpression
		public Assignment getTermListAssignment_3_1() { return cTermListAssignment_3_1; }

		//DottedExpression
		public RuleCall getTermListDottedExpressionParserRuleCall_3_1_0() { return cTermListDottedExpressionParserRuleCall_3_1_0; }
	}

	public class DottedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DottedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartStartParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDottedExpressionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMessageAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMessageMessageParserRuleCall_1_2_0 = (RuleCall)cMessageAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cDottedExpressionReceiverAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMessageAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMessageFieldAccessParserRuleCall_2_2_0 = (RuleCall)cMessageAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cEqualsSignKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Alternatives cAlternatives_2_3_1 = (Alternatives)cGroup_2_3.eContents().get(1);
		private final Assignment cValueAssignment_2_3_1_0 = (Assignment)cAlternatives_2_3_1.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_2_3_1_0_0 = (RuleCall)cValueAssignment_2_3_1_0.eContents().get(0);
		private final Assignment cValueAssignment_2_3_1_1 = (Assignment)cAlternatives_2_3_1.eContents().get(1);
		private final RuleCall cValueBooleanExpressionParserRuleCall_2_3_1_1_0 = (RuleCall)cValueAssignment_2_3_1_1.eContents().get(0);
		
		//DottedExpression:
		//	start=Start ({DottedExpression.receiver=current} "." message=Message)* ({DottedExpression.receiver=current} "."
		//	message=FieldAccess ("=" (value=Expression | value=BooleanExpression))?)?;
		public ParserRule getRule() { return rule; }

		//start=Start ({DottedExpression.receiver=current} "." message=Message)* ({DottedExpression.receiver=current} "."
		//message=FieldAccess ("=" (value=Expression | value=BooleanExpression))?)?
		public Group getGroup() { return cGroup; }

		//start=Start
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }

		//Start
		public RuleCall getStartStartParserRuleCall_0_0() { return cStartStartParserRuleCall_0_0; }

		//({DottedExpression.receiver=current} "." message=Message)*
		public Group getGroup_1() { return cGroup_1; }

		//{DottedExpression.receiver=current}
		public Action getDottedExpressionReceiverAction_1_0() { return cDottedExpressionReceiverAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//message=Message
		public Assignment getMessageAssignment_1_2() { return cMessageAssignment_1_2; }

		//Message
		public RuleCall getMessageMessageParserRuleCall_1_2_0() { return cMessageMessageParserRuleCall_1_2_0; }

		//({DottedExpression.receiver=current} "." message=FieldAccess ("=" (value=Expression | value=BooleanExpression))?)?
		public Group getGroup_2() { return cGroup_2; }

		//{DottedExpression.receiver=current}
		public Action getDottedExpressionReceiverAction_2_0() { return cDottedExpressionReceiverAction_2_0; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//message=FieldAccess
		public Assignment getMessageAssignment_2_2() { return cMessageAssignment_2_2; }

		//FieldAccess
		public RuleCall getMessageFieldAccessParserRuleCall_2_2_0() { return cMessageFieldAccessParserRuleCall_2_2_0; }

		//("=" (value=Expression | value=BooleanExpression))?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"="
		public Keyword getEqualsSignKeyword_2_3_0() { return cEqualsSignKeyword_2_3_0; }

		//value=Expression | value=BooleanExpression
		public Alternatives getAlternatives_2_3_1() { return cAlternatives_2_3_1; }

		//value=Expression
		public Assignment getValueAssignment_2_3_1_0() { return cValueAssignment_2_3_1_0; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_3_1_0_0() { return cValueExpressionParserRuleCall_2_3_1_0_0; }

		//value=BooleanExpression
		public Assignment getValueAssignment_2_3_1_1() { return cValueAssignment_2_3_1_1; }

		//BooleanExpression
		public RuleCall getValueBooleanExpressionParserRuleCall_2_3_1_1_0() { return cValueBooleanExpressionParserRuleCall_2_3_1_1_0; }
	}

	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNullParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArgsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanConstantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumberParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStringConstantParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCastParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cThisParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cParameterReferenceParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cConstructorInvocationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cNestedExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cParameterAssignmentParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Start:
		//	Null | Output | Input | Args | BooleanConstant | Number | StringConstant | Cast | This | ParameterReference |
		//	ConstructorInvocation | NestedExpression | ParameterAssignment;
		public ParserRule getRule() { return rule; }

		//Null | Output | Input | Args | BooleanConstant | Number | StringConstant | Cast | This | ParameterReference |
		//ConstructorInvocation | NestedExpression | ParameterAssignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Null
		public RuleCall getNullParserRuleCall_0() { return cNullParserRuleCall_0; }

		//Output
		public RuleCall getOutputParserRuleCall_1() { return cOutputParserRuleCall_1; }

		//Input
		public RuleCall getInputParserRuleCall_2() { return cInputParserRuleCall_2; }

		//Args
		public RuleCall getArgsParserRuleCall_3() { return cArgsParserRuleCall_3; }

		//BooleanConstant
		public RuleCall getBooleanConstantParserRuleCall_4() { return cBooleanConstantParserRuleCall_4; }

		//Number
		public RuleCall getNumberParserRuleCall_5() { return cNumberParserRuleCall_5; }

		//StringConstant
		public RuleCall getStringConstantParserRuleCall_6() { return cStringConstantParserRuleCall_6; }

		//Cast
		public RuleCall getCastParserRuleCall_7() { return cCastParserRuleCall_7; }

		//This
		public RuleCall getThisParserRuleCall_8() { return cThisParserRuleCall_8; }

		//ParameterReference
		public RuleCall getParameterReferenceParserRuleCall_9() { return cParameterReferenceParserRuleCall_9; }

		//ConstructorInvocation
		public RuleCall getConstructorInvocationParserRuleCall_10() { return cConstructorInvocationParserRuleCall_10; }

		//NestedExpression
		public RuleCall getNestedExpressionParserRuleCall_11() { return cNestedExpressionParserRuleCall_11; }

		//ParameterAssignment
		public RuleCall getParameterAssignmentParserRuleCall_12() { return cParameterAssignmentParserRuleCall_12; }
	}

	public class NullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Null");
		private final Assignment cNullAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNullNullKeyword_0 = (Keyword)cNullAssignment.eContents().get(0);
		
		//Null:
		//	null?="null";
		public ParserRule getRule() { return rule; }

		//null?="null"
		public Assignment getNullAssignment() { return cNullAssignment; }

		//"null"
		public Keyword getNullNullKeyword_0() { return cNullNullKeyword_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Assignment cInputAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cInputInKeyword_0 = (Keyword)cInputAssignment.eContents().get(0);
		
		//Input:
		//	input?="in";
		public ParserRule getRule() { return rule; }

		//input?="in"
		public Assignment getInputAssignment() { return cInputAssignment; }

		//"in"
		public Keyword getInputInKeyword_0() { return cInputInKeyword_0; }
	}

	public class ArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Args");
		private final Assignment cArgsAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cArgsArgsKeyword_0 = (Keyword)cArgsAssignment.eContents().get(0);
		
		//Args:
		//	args?="args";
		public ParserRule getRule() { return rule; }

		//args?="args"
		public Assignment getArgsAssignment() { return cArgsAssignment; }

		//"args"
		public Keyword getArgsArgsKeyword_0() { return cArgsArgsKeyword_0; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Assignment cOutputAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOutputOutKeyword_0 = (Keyword)cOutputAssignment.eContents().get(0);
		
		//Output:
		//	output?="out";
		public ParserRule getRule() { return rule; }

		//output?="out"
		public Assignment getOutputAssignment() { return cOutputAssignment; }

		//"out"
		public Keyword getOutputOutKeyword_0() { return cOutputOutKeyword_0; }
	}

	public class BooleanConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueFalseKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		//BooleanConstant:
		//	value="true" | value="false";
		public ParserRule getRule() { return rule; }

		//value="true" | value="false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value="true"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }

		//value="false"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"false"
		public Keyword getValueFalseKeyword_1_0() { return cValueFalseKeyword_1_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Number:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringConstant:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "This");
		private final Assignment cThisAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cThisThisKeyword_0 = (Keyword)cThisAssignment.eContents().get(0);
		
		//This:
		//	this?="this";
		public ParserRule getRule() { return rule; }

		//this?="this"
		public Assignment getThisAssignment() { return cThisAssignment; }

		//"this"
		public Keyword getThisThisKeyword_0() { return cThisThisKeyword_0; }
	}

	public class ParameterReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterReference");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_0 = (CrossReference)cParameterAssignment.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_1 = (RuleCall)cParameterParameterCrossReference_0.eContents().get(1);
		
		//ParameterReference:
		//	parameter=[Parameter];
		public ParserRule getRule() { return rule; }

		//parameter=[Parameter]
		public Assignment getParameterAssignment() { return cParameterAssignment; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0() { return cParameterParameterCrossReference_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_1() { return cParameterParameterIDTerminalRuleCall_0_1; }
	}

	public class ConstructorInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassRefClassCrossReference_1_0 = (CrossReference)cClassRefAssignment_1.eContents().get(0);
		private final RuleCall cClassRefClassIDTerminalRuleCall_1_0_1 = (RuleCall)cClassRefClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_0_0 = (Alternatives)cGroup_3_0.eContents().get(0);
		private final Assignment cArgumentListAssignment_3_0_0_0 = (Assignment)cAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cArgumentListExpressionParserRuleCall_3_0_0_0_0 = (RuleCall)cArgumentListAssignment_3_0_0_0.eContents().get(0);
		private final Assignment cArgumentListAssignment_3_0_0_1 = (Assignment)cAlternatives_3_0_0.eContents().get(1);
		private final RuleCall cArgumentListBooleanExpressionParserRuleCall_3_0_0_1_0 = (RuleCall)cArgumentListAssignment_3_0_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cArgumentListAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cArgumentListExpressionParserRuleCall_3_1_0_0 = (RuleCall)cArgumentListAssignment_3_1_0.eContents().get(0);
		private final Assignment cArgumentListAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cArgumentListBooleanExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentListAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConstructorInvocation:
		//	"new" classRef=[Class] "(" (((argumentList+=Expression | argumentList+=BooleanExpression) ",")*
		//	(argumentList+=Expression | argumentList+=BooleanExpression))? ")";
		public ParserRule getRule() { return rule; }

		//"new" classRef=[Class] "(" (((argumentList+=Expression | argumentList+=BooleanExpression) ",")*
		//(argumentList+=Expression | argumentList+=BooleanExpression))? ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//classRef=[Class]
		public Assignment getClassRefAssignment_1() { return cClassRefAssignment_1; }

		//[Class]
		public CrossReference getClassRefClassCrossReference_1_0() { return cClassRefClassCrossReference_1_0; }

		//ID
		public RuleCall getClassRefClassIDTerminalRuleCall_1_0_1() { return cClassRefClassIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(((argumentList+=Expression | argumentList+=BooleanExpression) ",")* (argumentList+=Expression |
		//argumentList+=BooleanExpression))?
		public Group getGroup_3() { return cGroup_3; }

		//((argumentList+=Expression | argumentList+=BooleanExpression) ",")*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//argumentList+=Expression | argumentList+=BooleanExpression
		public Alternatives getAlternatives_3_0_0() { return cAlternatives_3_0_0; }

		//argumentList+=Expression
		public Assignment getArgumentListAssignment_3_0_0_0() { return cArgumentListAssignment_3_0_0_0; }

		//Expression
		public RuleCall getArgumentListExpressionParserRuleCall_3_0_0_0_0() { return cArgumentListExpressionParserRuleCall_3_0_0_0_0; }

		//argumentList+=BooleanExpression
		public Assignment getArgumentListAssignment_3_0_0_1() { return cArgumentListAssignment_3_0_0_1; }

		//BooleanExpression
		public RuleCall getArgumentListBooleanExpressionParserRuleCall_3_0_0_1_0() { return cArgumentListBooleanExpressionParserRuleCall_3_0_0_1_0; }

		//","
		public Keyword getCommaKeyword_3_0_1() { return cCommaKeyword_3_0_1; }

		//argumentList+=Expression | argumentList+=BooleanExpression
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//argumentList+=Expression
		public Assignment getArgumentListAssignment_3_1_0() { return cArgumentListAssignment_3_1_0; }

		//Expression
		public RuleCall getArgumentListExpressionParserRuleCall_3_1_0_0() { return cArgumentListExpressionParserRuleCall_3_1_0_0; }

		//argumentList+=BooleanExpression
		public Assignment getArgumentListAssignment_3_1_1() { return cArgumentListAssignment_3_1_1; }

		//BooleanExpression
		public RuleCall getArgumentListBooleanExpressionParserRuleCall_3_1_1_0() { return cArgumentListBooleanExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStartStartParserRuleCall_3_0 = (RuleCall)cStartAssignment_3.eContents().get(0);
		
		//Cast:
		//	"(" type=Type ")" start=Start;
		public ParserRule getRule() { return rule; }

		//"(" type=Type ")" start=Start
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//start=Start
		public Assignment getStartAssignment_3() { return cStartAssignment_3; }

		//Start
		public RuleCall getStartStartParserRuleCall_3_0() { return cStartStartParserRuleCall_3_0; }
	}

	public class NestedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NestedExpression:
		//	"(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodInvocationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Message:
		//	MethodInvocation | FieldAccess;
		public ParserRule getRule() { return rule; }

		//MethodInvocation | FieldAccess
		public Alternatives getAlternatives() { return cAlternatives; }

		//MethodInvocation
		public RuleCall getMethodInvocationParserRuleCall_0() { return cMethodInvocationParserRuleCall_0; }

		//FieldAccess
		public RuleCall getFieldAccessParserRuleCall_1() { return cFieldAccessParserRuleCall_1; }
	}

	public class MethodInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMethodMethodNameCrossReference_0_0 = (CrossReference)cMethodAssignment_0.eContents().get(0);
		private final RuleCall cMethodMethodNameIDTerminalRuleCall_0_0_1 = (RuleCall)cMethodMethodNameCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cArgumentListAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cArgumentListExpressionParserRuleCall_2_0_0_0 = (RuleCall)cArgumentListAssignment_2_0_0.eContents().get(0);
		private final Assignment cArgumentListAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cArgumentListBooleanExpressionParserRuleCall_2_0_1_0 = (RuleCall)cArgumentListAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Assignment cArgumentListAssignment_2_1_1_0 = (Assignment)cAlternatives_2_1_1.eContents().get(0);
		private final RuleCall cArgumentListExpressionParserRuleCall_2_1_1_0_0 = (RuleCall)cArgumentListAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cArgumentListAssignment_2_1_1_1 = (Assignment)cAlternatives_2_1_1.eContents().get(1);
		private final RuleCall cArgumentListBooleanExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cArgumentListAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodInvocation:
		//	method=[MethodName] "(" ((argumentList+=Expression | argumentList+=BooleanExpression) ("," (argumentList+=Expression |
		//	argumentList+=BooleanExpression))*)? ")";
		public ParserRule getRule() { return rule; }

		//method=[MethodName] "(" ((argumentList+=Expression | argumentList+=BooleanExpression) ("," (argumentList+=Expression |
		//argumentList+=BooleanExpression))*)? ")"
		public Group getGroup() { return cGroup; }

		//method=[MethodName]
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }

		//[MethodName]
		public CrossReference getMethodMethodNameCrossReference_0_0() { return cMethodMethodNameCrossReference_0_0; }

		//ID
		public RuleCall getMethodMethodNameIDTerminalRuleCall_0_0_1() { return cMethodMethodNameIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//((argumentList+=Expression | argumentList+=BooleanExpression) ("," (argumentList+=Expression |
		//argumentList+=BooleanExpression))*)?
		public Group getGroup_2() { return cGroup_2; }

		//argumentList+=Expression | argumentList+=BooleanExpression
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//argumentList+=Expression
		public Assignment getArgumentListAssignment_2_0_0() { return cArgumentListAssignment_2_0_0; }

		//Expression
		public RuleCall getArgumentListExpressionParserRuleCall_2_0_0_0() { return cArgumentListExpressionParserRuleCall_2_0_0_0; }

		//argumentList+=BooleanExpression
		public Assignment getArgumentListAssignment_2_0_1() { return cArgumentListAssignment_2_0_1; }

		//BooleanExpression
		public RuleCall getArgumentListBooleanExpressionParserRuleCall_2_0_1_0() { return cArgumentListBooleanExpressionParserRuleCall_2_0_1_0; }

		//("," (argumentList+=Expression | argumentList+=BooleanExpression))*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//argumentList+=Expression | argumentList+=BooleanExpression
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }

		//argumentList+=Expression
		public Assignment getArgumentListAssignment_2_1_1_0() { return cArgumentListAssignment_2_1_1_0; }

		//Expression
		public RuleCall getArgumentListExpressionParserRuleCall_2_1_1_0_0() { return cArgumentListExpressionParserRuleCall_2_1_1_0_0; }

		//argumentList+=BooleanExpression
		public Assignment getArgumentListAssignment_2_1_1_1() { return cArgumentListAssignment_2_1_1_1; }

		//BooleanExpression
		public RuleCall getArgumentListBooleanExpressionParserRuleCall_2_1_1_1_0() { return cArgumentListBooleanExpressionParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FieldAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldAccess");
		private final Assignment cFieldAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFieldFieldNameCrossReference_0 = (CrossReference)cFieldAssignment.eContents().get(0);
		private final RuleCall cFieldFieldNameIDTerminalRuleCall_0_1 = (RuleCall)cFieldFieldNameCrossReference_0.eContents().get(1);
		
		//FieldAccess:
		//	field=[FieldName];
		public ParserRule getRule() { return rule; }

		//field=[FieldName]
		public Assignment getFieldAssignment() { return cFieldAssignment; }

		//[FieldName]
		public CrossReference getFieldFieldNameCrossReference_0() { return cFieldFieldNameCrossReference_0; }

		//ID
		public RuleCall getFieldFieldNameIDTerminalRuleCall_0_1() { return cFieldFieldNameIDTerminalRuleCall_0_1; }
	}

	public class ParameterAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterParameterCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueBooleanExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//ParameterAssignment:
		//	parameter=[Parameter] "=" (value=Expression | value=BooleanExpression);
		public ParserRule getRule() { return rule; }

		//parameter=[Parameter] "=" (value=Expression | value=BooleanExpression)
		public Group getGroup() { return cGroup; }

		//parameter=[Parameter]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0_0() { return cParameterParameterCrossReference_0_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_0_1() { return cParameterParameterIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression | value=BooleanExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=Expression
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0_0() { return cValueExpressionParserRuleCall_2_0_0; }

		//value=BooleanExpression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//BooleanExpression
		public RuleCall getValueBooleanExpressionParserRuleCall_2_1_0() { return cValueBooleanExpressionParserRuleCall_2_1_0; }
	}
	
	
	private FileElements pFile;
	private ImportElements pImport;
	private ElementElements pElement;
	private InterfaceElements pInterface;
	private RecordElements pRecord;
	private TraitElements pTrait;
	private ClassElements pClass;
	private ProgramElements pProgram;
	private RecordExpressionElements pRecordExpression;
	private BaseRecordElements pBaseRecord;
	private AnonimousRecordElements pAnonimousRecord;
	private RecordNameElements pRecordName;
	private NestedRecordExpressionElements pNestedRecordExpression;
	private RecordOperationElements pRecordOperation;
	private TraitExpressionElements pTraitExpression;
	private BaseTraitElements pBaseTrait;
	private AnonimousTraitElements pAnonimousTrait;
	private TraitNameElements pTraitName;
	private NestedTraitExpressionElements pNestedTraitExpression;
	private TraitOperationElements pTraitOperation;
	private TraitElementElements pTraitElement;
	private FieldDeclarationElements pFieldDeclaration;
	private RequiredFieldElements pRequiredField;
	private RequiredMethodElements pRequiredMethod;
	private ProvidedMethodElements pProvidedMethod;
	private ConstructorElements pConstructor;
	private ReturnStatementElements pReturnStatement;
	private ParameterElements pParameter;
	private FieldNameElements pFieldName;
	private MethodNameElements pMethodName;
	private TypeElements pType;
	private ReturnTypeElements pReturnType;
	private BlockElements pBlock;
	private StatementElements pStatement;
	private ExpressionStatementElements pExpressionStatement;
	private IfThenElseStatementElements pIfThenElseStatement;
	private WhileStatementElements pWhileStatement;
	private BooleanExpressionElements pBooleanExpression;
	private BooleanOperatorElements pBooleanOperator;
	private AtomicBooleanExpressionElements pAtomicBooleanExpression;
	private SimpleComparationElements pSimpleComparation;
	private NestedBooleanExpressionElements pNestedBooleanExpression;
	private CompareOperatorElements pCompareOperator;
	private LocalParameterElements pLocalParameter;
	private ExpressionElements pExpression;
	private DottedExpressionElements pDottedExpression;
	private StartElements pStart;
	private NullElements pNull;
	private InputElements pInput;
	private ArgsElements pArgs;
	private OutputElements pOutput;
	private BooleanConstantElements pBooleanConstant;
	private NumberElements pNumber;
	private StringConstantElements pStringConstant;
	private ThisElements pThis;
	private ParameterReferenceElements pParameterReference;
	private ConstructorInvocationElements pConstructorInvocation;
	private CastElements pCast;
	private NestedExpressionElements pNestedExpression;
	private MessageElements pMessage;
	private MethodInvocationElements pMethodInvocation;
	private FieldAccessElements pFieldAccess;
	private ParameterAssignmentElements pParameterAssignment;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SwrtjGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File:
	//	importList+=Import* elementList+=Element*;
	public FileElements getFileAccess() {
		return (pFile != null) ? pFile : (pFile = new FileElements());
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Element:
	//	Interface | Record | Trait | Class | Program;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	/// *Element declarations* / Interface:
	//	construct="interface" name=ID ("extends" extendsList+=[Interface] ("," extendsList+=[Interface])*)? "{"
	//	requiredMethodList+=RequiredMethod* "}";
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//Record:
	//	construct="record" name=ID "is" expression=RecordExpression;
	public RecordElements getRecordAccess() {
		return (pRecord != null) ? pRecord : (pRecord = new RecordElements());
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}

	//Trait:
	//	construct="trait" name=ID "is" expression=TraitExpression;
	public TraitElements getTraitAccess() {
		return (pTrait != null) ? pTrait : (pTrait = new TraitElements());
	}
	
	public ParserRule getTraitRule() {
		return getTraitAccess().getRule();
	}

	//Class:
	//	construct="class" name=ID "implements" implementsList+=[Interface] ("," implementsList+=[Interface])* "by"
	//	recordExpression=RecordExpression "and" traitExpression=TraitExpression "{" constructorList+=Constructor* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Program:
	//	construct="program" name=ID "{" block=Block "}";
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	/// *Traits and records* / RecordExpression:
	//	recordList+=BaseRecord ("+" recordList+=BaseRecord)*;
	public RecordExpressionElements getRecordExpressionAccess() {
		return (pRecordExpression != null) ? pRecordExpression : (pRecordExpression = new RecordExpressionElements());
	}
	
	public ParserRule getRecordExpressionRule() {
		return getRecordExpressionAccess().getRule();
	}

	//BaseRecord:
	//	AnonimousRecord | RecordName | NestedRecordExpression;
	public BaseRecordElements getBaseRecordAccess() {
		return (pBaseRecord != null) ? pBaseRecord : (pBaseRecord = new BaseRecordElements());
	}
	
	public ParserRule getBaseRecordRule() {
		return getBaseRecordAccess().getRule();
	}

	//AnonimousRecord:
	//	"{" {AnonimousRecord} declarationList+=FieldDeclaration* "}" ("[" operationList+=RecordOperation (","
	//	operationList+=RecordOperation)* "]")?;
	public AnonimousRecordElements getAnonimousRecordAccess() {
		return (pAnonimousRecord != null) ? pAnonimousRecord : (pAnonimousRecord = new AnonimousRecordElements());
	}
	
	public ParserRule getAnonimousRecordRule() {
		return getAnonimousRecordAccess().getRule();
	}

	//RecordName:
	//	record=[Record] ("[" operationList+=RecordOperation ("," operationList+=RecordOperation)* "]")?;
	public RecordNameElements getRecordNameAccess() {
		return (pRecordName != null) ? pRecordName : (pRecordName = new RecordNameElements());
	}
	
	public ParserRule getRecordNameRule() {
		return getRecordNameAccess().getRule();
	}

	//NestedRecordExpression:
	//	"(" expression=RecordExpression ")" ("[" operationList+=RecordOperation ("," operationList+=RecordOperation)* "]")?;
	public NestedRecordExpressionElements getNestedRecordExpressionAccess() {
		return (pNestedRecordExpression != null) ? pNestedRecordExpression : (pNestedRecordExpression = new NestedRecordExpressionElements());
	}
	
	public ParserRule getNestedRecordExpressionRule() {
		return getNestedRecordExpressionAccess().getRule();
	}

	//RecordOperation:
	//	{RecordExclude} "exclude" field=[FieldName] | {RecordRename} originalField=[FieldName] "renameTo" newField=FieldName |
	//	{RecordRename} originalField=[FieldName] "renameF" newField=FieldName;
	public RecordOperationElements getRecordOperationAccess() {
		return (pRecordOperation != null) ? pRecordOperation : (pRecordOperation = new RecordOperationElements());
	}
	
	public ParserRule getRecordOperationRule() {
		return getRecordOperationAccess().getRule();
	}

	//TraitExpression:
	//	traitList+=BaseTrait ("+" traitList+=BaseTrait)*;
	public TraitExpressionElements getTraitExpressionAccess() {
		return (pTraitExpression != null) ? pTraitExpression : (pTraitExpression = new TraitExpressionElements());
	}
	
	public ParserRule getTraitExpressionRule() {
		return getTraitExpressionAccess().getRule();
	}

	//BaseTrait:
	//	AnonimousTrait | TraitName | NestedTraitExpression;
	public BaseTraitElements getBaseTraitAccess() {
		return (pBaseTrait != null) ? pBaseTrait : (pBaseTrait = new BaseTraitElements());
	}
	
	public ParserRule getBaseTraitRule() {
		return getBaseTraitAccess().getRule();
	}

	//AnonimousTrait:
	//	"{" {AnonimousTrait} definitionList+=TraitElement* "}" ("[" operationList+=TraitOperation (","
	//	operationList+=TraitOperation)* "]")?;
	public AnonimousTraitElements getAnonimousTraitAccess() {
		return (pAnonimousTrait != null) ? pAnonimousTrait : (pAnonimousTrait = new AnonimousTraitElements());
	}
	
	public ParserRule getAnonimousTraitRule() {
		return getAnonimousTraitAccess().getRule();
	}

	//TraitName:
	//	trait=[Trait] ("[" operationList+=TraitOperation ("," operationList+=TraitOperation)* "]")?;
	public TraitNameElements getTraitNameAccess() {
		return (pTraitName != null) ? pTraitName : (pTraitName = new TraitNameElements());
	}
	
	public ParserRule getTraitNameRule() {
		return getTraitNameAccess().getRule();
	}

	//NestedTraitExpression:
	//	"(" expression=TraitExpression ")" ("[" operationList+=TraitOperation ("," operationList+=TraitOperation)* "]")?;
	public NestedTraitExpressionElements getNestedTraitExpressionAccess() {
		return (pNestedTraitExpression != null) ? pNestedTraitExpression : (pNestedTraitExpression = new NestedTraitExpressionElements());
	}
	
	public ParserRule getNestedTraitExpressionRule() {
		return getNestedTraitExpressionAccess().getRule();
	}

	//TraitOperation:
	//	{TraitExclude} "exclude" method=[MethodName] | {TraitAlias} originalMethod=[MethodName] "aliasAs" newMethod=MethodName
	//	| {TraitMethodRename} originalMethod=[MethodName] "renameTo" newMethod=MethodName | {TraitMethodRename}
	//	originalMethod=[MethodName] "renameM" newMethod=MethodName | {TraitFieldRename} originalField=[FieldName]
	//	"renameFieldTo" newField=FieldName | {TraitFieldRename} originalField=[FieldName] "renameF" newField=FieldName;
	public TraitOperationElements getTraitOperationAccess() {
		return (pTraitOperation != null) ? pTraitOperation : (pTraitOperation = new TraitOperationElements());
	}
	
	public ParserRule getTraitOperationRule() {
		return getTraitOperationAccess().getRule();
	}

	//TraitElement:
	//	RequiredField | RequiredMethod | ProvidedMethod;
	public TraitElementElements getTraitElementAccess() {
		return (pTraitElement != null) ? pTraitElement : (pTraitElement = new TraitElementElements());
	}
	
	public ParserRule getTraitElementRule() {
		return getTraitElementAccess().getRule();
	}

	/// *Variable and method declarations* / FieldDeclaration returns Field:
	//	{FieldDeclaration} (modifier="transient" | modifier="volatile")? type=Type fieldRef=FieldName ";";
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return (pFieldDeclaration != null) ? pFieldDeclaration : (pFieldDeclaration = new FieldDeclarationElements());
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}

	//RequiredField returns Field:
	//	{RequiredField} type=Type fieldRef=FieldName ";";
	public RequiredFieldElements getRequiredFieldAccess() {
		return (pRequiredField != null) ? pRequiredField : (pRequiredField = new RequiredFieldElements());
	}
	
	public ParserRule getRequiredFieldRule() {
		return getRequiredFieldAccess().getRule();
	}

	//RequiredMethod returns Method:
	//	{RequiredMethod} returnType=ReturnType methodRef=MethodName "(" (parameterList+=Parameter (","
	//	parameterList+=Parameter)*)? ")" ";";
	public RequiredMethodElements getRequiredMethodAccess() {
		return (pRequiredMethod != null) ? pRequiredMethod : (pRequiredMethod = new RequiredMethodElements());
	}
	
	public ParserRule getRequiredMethodRule() {
		return getRequiredMethodAccess().getRule();
	}

	//ProvidedMethod returns Method:
	//	{ProvidedMethod} isSynchronized?="synchronized"? returnType=ReturnType methodRef=MethodName "("
	//	(parameterList+=Parameter ("," parameterList+=Parameter)*)? ")" "{" block=Block returnStatement=ReturnStatement? "}";
	public ProvidedMethodElements getProvidedMethodAccess() {
		return (pProvidedMethod != null) ? pProvidedMethod : (pProvidedMethod = new ProvidedMethodElements());
	}
	
	public ParserRule getProvidedMethodRule() {
		return getProvidedMethodAccess().getRule();
	}

	//Constructor:
	//	name=ID "(" (parameterList+=Parameter ("," parameterList+=Parameter)*)? ")" "{" block=Block "}";
	public ConstructorElements getConstructorAccess() {
		return (pConstructor != null) ? pConstructor : (pConstructor = new ConstructorElements());
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//ReturnStatement:
	//	"return" expression=Expression ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//Parameter:
	//	{FormalParameter} type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//FieldName:
	//	name=ID;
	public FieldNameElements getFieldNameAccess() {
		return (pFieldName != null) ? pFieldName : (pFieldName = new FieldNameElements());
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}

	//MethodName:
	//	name=ID;
	public MethodNameElements getMethodNameAccess() {
		return (pMethodName != null) ? pMethodName : (pMethodName = new MethodNameElements());
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}

	//Type:
	//	interfaceType=[Interface] | //javaType=[types::JvmType] |
	//	primitiveType="byte" | primitiveType="char" | primitiveType="boolean" | primitiveType="short" | primitiveType="int" |
	//	primitiveType="long" | primitiveType="float" | primitiveType="double";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ReturnType returns Type:
	//	interfaceType=[Interface] | //javaType=[types::JvmType] |
	//	primitiveType="byte" | primitiveType="char" | primitiveType="boolean" | primitiveType="short" | primitiveType="int" |
	//	primitiveType="long" | primitiveType="float" | primitiveType="double" | primitiveType="void";
	public ReturnTypeElements getReturnTypeAccess() {
		return (pReturnType != null) ? pReturnType : (pReturnType = new ReturnTypeElements());
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}

	/// *Method implementation* / Block:
	//	{Block} parameterList+=LocalParameter* statementList+=Statement*;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//Statement:
	//	ExpressionStatement | IfThenElseStatement | WhileStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//ExpressionStatement:
	//	expression=Expression ";";
	public ExpressionStatementElements getExpressionStatementAccess() {
		return (pExpressionStatement != null) ? pExpressionStatement : (pExpressionStatement = new ExpressionStatementElements());
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//IfThenElseStatement:
	//	"if" "(" condiction=BooleanExpression ")" "{" trueBranch=Block "}" ("else" "{" falseBranch=Block "}")?;
	public IfThenElseStatementElements getIfThenElseStatementAccess() {
		return (pIfThenElseStatement != null) ? pIfThenElseStatement : (pIfThenElseStatement = new IfThenElseStatementElements());
	}
	
	public ParserRule getIfThenElseStatementRule() {
		return getIfThenElseStatementAccess().getRule();
	}

	//WhileStatement:
	//	"while" "(" condiction=BooleanExpression ")" "{" whileBlock=Block "}";
	public WhileStatementElements getWhileStatementAccess() {
		return (pWhileStatement != null) ? pWhileStatement : (pWhileStatement = new WhileStatementElements());
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	////Boolean expressions
	//BooleanExpression returns GenericExpression:
	//	{BooleanExpression} atomicList+=AtomicBooleanExpression (booleanOperatorList+=BooleanOperator
	//	atomicList+=AtomicBooleanExpression)*;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//BooleanOperator:
	//	operator="&" | operator="&&" | operator="|" | operator="||" | operator="^";
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return (pBooleanOperator != null) ? pBooleanOperator : (pBooleanOperator = new BooleanOperatorElements());
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}

	//AtomicBooleanExpression:
	//	SimpleComparation | NestedBooleanExpression;
	public AtomicBooleanExpressionElements getAtomicBooleanExpressionAccess() {
		return (pAtomicBooleanExpression != null) ? pAtomicBooleanExpression : (pAtomicBooleanExpression = new AtomicBooleanExpressionElements());
	}
	
	public ParserRule getAtomicBooleanExpressionRule() {
		return getAtomicBooleanExpressionAccess().getRule();
	}

	//SimpleComparation:
	//	negated?="!"? leftExpression=Expression (compare=CompareOperator rightExpression=Expression)?;
	public SimpleComparationElements getSimpleComparationAccess() {
		return (pSimpleComparation != null) ? pSimpleComparation : (pSimpleComparation = new SimpleComparationElements());
	}
	
	public ParserRule getSimpleComparationRule() {
		return getSimpleComparationAccess().getRule();
	}

	//NestedBooleanExpression:
	//	negated?="!"? "(" nestedExpression=BooleanExpression ")";
	public NestedBooleanExpressionElements getNestedBooleanExpressionAccess() {
		return (pNestedBooleanExpression != null) ? pNestedBooleanExpression : (pNestedBooleanExpression = new NestedBooleanExpressionElements());
	}
	
	public ParserRule getNestedBooleanExpressionRule() {
		return getNestedBooleanExpressionAccess().getRule();
	}

	//CompareOperator:
	//	operator="<" | operator="<=" | operator="==" | operator="!=" | operator=">" | operator=">=";
	public CompareOperatorElements getCompareOperatorAccess() {
		return (pCompareOperator != null) ? pCompareOperator : (pCompareOperator = new CompareOperatorElements());
	}
	
	public ParserRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	////Expressions
	//LocalParameter returns Parameter:
	//	{LocalParameter} type=Type name=ID "=" value=Expression ";" | {LocalParameter} type=Type name=ID "="
	//	value=BooleanExpression ";";
	public LocalParameterElements getLocalParameterAccess() {
		return (pLocalParameter != null) ? pLocalParameter : (pLocalParameter = new LocalParameterElements());
	}
	
	public ParserRule getLocalParameterRule() {
		return getLocalParameterAccess().getRule();
	}

	//Expression returns GenericExpression:
	//	{Expression} (sign="-" | sign="+")? termList+=DottedExpression (operatorList+=("+" | "-" | "*" | "/" | "%")
	//	termList+=DottedExpression)*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//DottedExpression:
	//	start=Start ({DottedExpression.receiver=current} "." message=Message)* ({DottedExpression.receiver=current} "."
	//	message=FieldAccess ("=" (value=Expression | value=BooleanExpression))?)?;
	public DottedExpressionElements getDottedExpressionAccess() {
		return (pDottedExpression != null) ? pDottedExpression : (pDottedExpression = new DottedExpressionElements());
	}
	
	public ParserRule getDottedExpressionRule() {
		return getDottedExpressionAccess().getRule();
	}

	//Start:
	//	Null | Output | Input | Args | BooleanConstant | Number | StringConstant | Cast | This | ParameterReference |
	//	ConstructorInvocation | NestedExpression | ParameterAssignment;
	public StartElements getStartAccess() {
		return (pStart != null) ? pStart : (pStart = new StartElements());
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//Null:
	//	null?="null";
	public NullElements getNullAccess() {
		return (pNull != null) ? pNull : (pNull = new NullElements());
	}
	
	public ParserRule getNullRule() {
		return getNullAccess().getRule();
	}

	//Input:
	//	input?="in";
	public InputElements getInputAccess() {
		return (pInput != null) ? pInput : (pInput = new InputElements());
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Args:
	//	args?="args";
	public ArgsElements getArgsAccess() {
		return (pArgs != null) ? pArgs : (pArgs = new ArgsElements());
	}
	
	public ParserRule getArgsRule() {
		return getArgsAccess().getRule();
	}

	//Output:
	//	output?="out";
	public OutputElements getOutputAccess() {
		return (pOutput != null) ? pOutput : (pOutput = new OutputElements());
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	//BooleanConstant:
	//	value="true" | value="false";
	public BooleanConstantElements getBooleanConstantAccess() {
		return (pBooleanConstant != null) ? pBooleanConstant : (pBooleanConstant = new BooleanConstantElements());
	}
	
	public ParserRule getBooleanConstantRule() {
		return getBooleanConstantAccess().getRule();
	}

	//Number:
	//	value=INT;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//StringConstant:
	//	value=STRING;
	public StringConstantElements getStringConstantAccess() {
		return (pStringConstant != null) ? pStringConstant : (pStringConstant = new StringConstantElements());
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}

	//This:
	//	this?="this";
	public ThisElements getThisAccess() {
		return (pThis != null) ? pThis : (pThis = new ThisElements());
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}

	//ParameterReference:
	//	parameter=[Parameter];
	public ParameterReferenceElements getParameterReferenceAccess() {
		return (pParameterReference != null) ? pParameterReference : (pParameterReference = new ParameterReferenceElements());
	}
	
	public ParserRule getParameterReferenceRule() {
		return getParameterReferenceAccess().getRule();
	}

	//ConstructorInvocation:
	//	"new" classRef=[Class] "(" (((argumentList+=Expression | argumentList+=BooleanExpression) ",")*
	//	(argumentList+=Expression | argumentList+=BooleanExpression))? ")";
	public ConstructorInvocationElements getConstructorInvocationAccess() {
		return (pConstructorInvocation != null) ? pConstructorInvocation : (pConstructorInvocation = new ConstructorInvocationElements());
	}
	
	public ParserRule getConstructorInvocationRule() {
		return getConstructorInvocationAccess().getRule();
	}

	//Cast:
	//	"(" type=Type ")" start=Start;
	public CastElements getCastAccess() {
		return (pCast != null) ? pCast : (pCast = new CastElements());
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}

	//NestedExpression:
	//	"(" expression=Expression ")";
	public NestedExpressionElements getNestedExpressionAccess() {
		return (pNestedExpression != null) ? pNestedExpression : (pNestedExpression = new NestedExpressionElements());
	}
	
	public ParserRule getNestedExpressionRule() {
		return getNestedExpressionAccess().getRule();
	}

	//Message:
	//	MethodInvocation | FieldAccess;
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//MethodInvocation:
	//	method=[MethodName] "(" ((argumentList+=Expression | argumentList+=BooleanExpression) ("," (argumentList+=Expression |
	//	argumentList+=BooleanExpression))*)? ")";
	public MethodInvocationElements getMethodInvocationAccess() {
		return (pMethodInvocation != null) ? pMethodInvocation : (pMethodInvocation = new MethodInvocationElements());
	}
	
	public ParserRule getMethodInvocationRule() {
		return getMethodInvocationAccess().getRule();
	}

	//FieldAccess:
	//	field=[FieldName];
	public FieldAccessElements getFieldAccessAccess() {
		return (pFieldAccess != null) ? pFieldAccess : (pFieldAccess = new FieldAccessElements());
	}
	
	public ParserRule getFieldAccessRule() {
		return getFieldAccessAccess().getRule();
	}

	//ParameterAssignment:
	//	parameter=[Parameter] "=" (value=Expression | value=BooleanExpression);
	public ParameterAssignmentElements getParameterAssignmentAccess() {
		return (pParameterAssignment != null) ? pParameterAssignment : (pParameterAssignment = new ParameterAssignmentElements());
	}
	
	public ParserRule getParameterAssignmentRule() {
		return getParameterAssignmentAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
