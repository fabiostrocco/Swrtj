/*
* generated by Xtext
*/
grammar InternalSwrtj;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.xtext.example.services.SwrtjGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private SwrtjGrammarAccess grammarAccess;
 	
    public InternalSwrtjParser(TokenStream input, IAstFactory factory, SwrtjGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/xtext/example/parser/antlr/internal/InternalSwrtj.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "File";	
   	}
   	
   	@Override
   	protected SwrtjGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFileRule(), currentNode); }
	 iv_ruleFile=ruleFile 
	 { $current=$iv_ruleFile.current; } 
	 EOF 
;

// Rule File
ruleFile returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFileAccess().getImportListImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_importList_0_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"importList",
	        		lv_importList_0_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFileAccess().getElementListElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_elementList_1_0=ruleElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elementList",
	        		lv_elementList_1_0, 
	        		"Element", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElementRule(), currentNode); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getElementAccess().getInterfaceParserRuleCall_0(), currentNode); 
    }
    this_Interface_0=ruleInterface
    { 
        $current = $this_Interface_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getElementAccess().getRecordParserRuleCall_1(), currentNode); 
    }
    this_Record_1=ruleRecord
    { 
        $current = $this_Record_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getElementAccess().getTraitParserRuleCall_2(), currentNode); 
    }
    this_Trait_2=ruleTrait
    { 
        $current = $this_Trait_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getElementAccess().getClassParserRuleCall_3(), currentNode); 
    }
    this_Class_3=ruleClass
    { 
        $current = $this_Class_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getElementAccess().getProgramParserRuleCall_4(), currentNode); 
    }
    this_Program_4=ruleProgram
    { 
        $current = $this_Program_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInterfaceRule(), currentNode); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_construct_0_0=	'interface' 
    {
        createLeafNode(grammarAccess.getInterfaceAccess().getConstructInterfaceKeyword_0_0(), "construct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "construct", lv_construct_0_0, "interface", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getInterfaceAccess().getExtendsKeyword_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInterfaceAccess().getExtendsListInterfaceCrossReference_2_1_0(), "extendsList"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getInterfaceAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInterfaceAccess().getExtendsListInterfaceCrossReference_2_2_1_0(), "extendsList"); 
	}

)
))*)?	'{' 
    {
        createLeafNode(grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInterfaceAccess().getRequiredMethodListRequiredMethodParserRuleCall_4_0(), currentNode); 
	    }
		lv_requiredMethodList_7_0=ruleRequiredMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"requiredMethodList",
	        		lv_requiredMethodList_7_0, 
	        		"RequiredMethod", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleRecord
entryRuleRecord returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRecordRule(), currentNode); }
	 iv_ruleRecord=ruleRecord 
	 { $current=$iv_ruleRecord.current; } 
	 EOF 
;

// Rule Record
ruleRecord returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_construct_0_0=	'record' 
    {
        createLeafNode(grammarAccess.getRecordAccess().getConstructRecordKeyword_0_0(), "construct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "construct", lv_construct_0_0, "record", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRecordAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'is' 
    {
        createLeafNode(grammarAccess.getRecordAccess().getIsKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecordAccess().getExpressionRecordExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_expression_3_0=ruleRecordExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"RecordExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTrait
entryRuleTrait returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraitRule(), currentNode); }
	 iv_ruleTrait=ruleTrait 
	 { $current=$iv_ruleTrait.current; } 
	 EOF 
;

// Rule Trait
ruleTrait returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_construct_0_0=	'trait' 
    {
        createLeafNode(grammarAccess.getTraitAccess().getConstructTraitKeyword_0_0(), "construct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "construct", lv_construct_0_0, "trait", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTraitAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'is' 
    {
        createLeafNode(grammarAccess.getTraitAccess().getIsKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitAccess().getExpressionTraitExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_expression_3_0=ruleTraitExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"TraitExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassRule(), currentNode); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_construct_0_0=	'class' 
    {
        createLeafNode(grammarAccess.getClassAccess().getConstructClassKeyword_0_0(), "construct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "construct", lv_construct_0_0, "class", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'implements' 
    {
        createLeafNode(grammarAccess.getClassAccess().getImplementsKeyword_2(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClassAccess().getImplementsListInterfaceCrossReference_3_0(), "implementsList"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getClassAccess().getCommaKeyword_4_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClassAccess().getImplementsListInterfaceCrossReference_4_1_0(), "implementsList"); 
	}

)
))*	'by' 
    {
        createLeafNode(grammarAccess.getClassAccess().getByKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassAccess().getRecordExpressionRecordExpressionParserRuleCall_6_0(), currentNode); 
	    }
		lv_recordExpression_7_0=ruleRecordExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"recordExpression",
	        		lv_recordExpression_7_0, 
	        		"RecordExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'and' 
    {
        createLeafNode(grammarAccess.getClassAccess().getAndKeyword_7(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassAccess().getTraitExpressionTraitExpressionParserRuleCall_8_0(), currentNode); 
	    }
		lv_traitExpression_9_0=ruleTraitExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"traitExpression",
	        		lv_traitExpression_9_0, 
	        		"TraitExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_9(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassAccess().getConstructorListConstructorParserRuleCall_10_0(), currentNode); 
	    }
		lv_constructorList_11_0=ruleConstructor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constructorList",
	        		lv_constructorList_11_0, 
	        		"Constructor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_11(), null); 
    }
)
;





// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProgramRule(), currentNode); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_construct_0_0=	'program' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getConstructProgramKeyword_0_0(), "construct"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "construct", lv_construct_0_0, "program", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_3_0(), currentNode); 
	    }
		lv_block_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_3_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleRecordExpression
entryRuleRecordExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRecordExpressionRule(), currentNode); }
	 iv_ruleRecordExpression=ruleRecordExpression 
	 { $current=$iv_ruleRecordExpression.current; } 
	 EOF 
;

// Rule RecordExpression
ruleRecordExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecordExpressionAccess().getRecordListBaseRecordParserRuleCall_0_0(), currentNode); 
	    }
		lv_recordList_0_0=ruleBaseRecord		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"recordList",
	        		lv_recordList_0_0, 
	        		"BaseRecord", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'+' 
    {
        createLeafNode(grammarAccess.getRecordExpressionAccess().getPlusSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecordExpressionAccess().getRecordListBaseRecordParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_recordList_2_0=ruleBaseRecord		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"recordList",
	        		lv_recordList_2_0, 
	        		"BaseRecord", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleBaseRecord
entryRuleBaseRecord returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBaseRecordRule(), currentNode); }
	 iv_ruleBaseRecord=ruleBaseRecord 
	 { $current=$iv_ruleBaseRecord.current; } 
	 EOF 
;

// Rule BaseRecord
ruleBaseRecord returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBaseRecordAccess().getAnonimousRecordParserRuleCall_0(), currentNode); 
    }
    this_AnonimousRecord_0=ruleAnonimousRecord
    { 
        $current = $this_AnonimousRecord_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBaseRecordAccess().getRecordNameParserRuleCall_1(), currentNode); 
    }
    this_RecordName_1=ruleRecordName
    { 
        $current = $this_RecordName_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBaseRecordAccess().getNestedRecordExpressionParserRuleCall_2(), currentNode); 
    }
    this_NestedRecordExpression_2=ruleNestedRecordExpression
    { 
        $current = $this_NestedRecordExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAnonimousRecord
entryRuleAnonimousRecord returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnonimousRecordRule(), currentNode); }
	 iv_ruleAnonimousRecord=ruleAnonimousRecord 
	 { $current=$iv_ruleAnonimousRecord.current; } 
	 EOF 
;

// Rule AnonimousRecord
ruleAnonimousRecord returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getAnonimousRecordAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAnonimousRecordAccess().getAnonimousRecordAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAnonimousRecordAccess().getAnonimousRecordAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnonimousRecordAccess().getDeclarationListFieldDeclarationParserRuleCall_2_0(), currentNode); 
	    }
		lv_declarationList_2_0=ruleFieldDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnonimousRecordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"declarationList",
	        		lv_declarationList_2_0, 
	        		"FieldDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getAnonimousRecordAccess().getRightCurlyBracketKeyword_3(), null); 
    }
(	'[' 
    {
        createLeafNode(grammarAccess.getAnonimousRecordAccess().getLeftSquareBracketKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnonimousRecordAccess().getOperationListRecordOperationParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_operationList_5_0=ruleRecordOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnonimousRecordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_5_0, 
	        		"RecordOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAnonimousRecordAccess().getCommaKeyword_4_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnonimousRecordAccess().getOperationListRecordOperationParserRuleCall_4_2_1_0(), currentNode); 
	    }
		lv_operationList_7_0=ruleRecordOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnonimousRecordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_7_0, 
	        		"RecordOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getAnonimousRecordAccess().getRightSquareBracketKeyword_4_3(), null); 
    }
)?)
;





// Entry rule entryRuleRecordName
entryRuleRecordName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRecordNameRule(), currentNode); }
	 iv_ruleRecordName=ruleRecordName 
	 { $current=$iv_ruleRecordName.current; } 
	 EOF 
;

// Rule RecordName
ruleRecordName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRecordNameAccess().getRecordRecordCrossReference_0_0(), "record"); 
	}

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getRecordNameAccess().getLeftSquareBracketKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecordNameAccess().getOperationListRecordOperationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_operationList_2_0=ruleRecordOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_2_0, 
	        		"RecordOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRecordNameAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecordNameAccess().getOperationListRecordOperationParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_operationList_4_0=ruleRecordOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_4_0, 
	        		"RecordOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getRecordNameAccess().getRightSquareBracketKeyword_1_3(), null); 
    }
)?)
;





// Entry rule entryRuleNestedRecordExpression
entryRuleNestedRecordExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNestedRecordExpressionRule(), currentNode); }
	 iv_ruleNestedRecordExpression=ruleNestedRecordExpression 
	 { $current=$iv_ruleNestedRecordExpression.current; } 
	 EOF 
;

// Rule NestedRecordExpression
ruleNestedRecordExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getNestedRecordExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedRecordExpressionAccess().getExpressionRecordExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleRecordExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedRecordExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"RecordExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getNestedRecordExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
(	'[' 
    {
        createLeafNode(grammarAccess.getNestedRecordExpressionAccess().getLeftSquareBracketKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedRecordExpressionAccess().getOperationListRecordOperationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_operationList_4_0=ruleRecordOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedRecordExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_4_0, 
	        		"RecordOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getNestedRecordExpressionAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedRecordExpressionAccess().getOperationListRecordOperationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_operationList_6_0=ruleRecordOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedRecordExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_6_0, 
	        		"RecordOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getNestedRecordExpressionAccess().getRightSquareBracketKeyword_3_3(), null); 
    }
)?)
;





// Entry rule entryRuleRecordOperation
entryRuleRecordOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRecordOperationRule(), currentNode); }
	 iv_ruleRecordOperation=ruleRecordOperation 
	 { $current=$iv_ruleRecordOperation.current; } 
	 EOF 
;

// Rule RecordOperation
ruleRecordOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRecordOperationAccess().getRecordExcludeAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRecordOperationAccess().getRecordExcludeAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'exclude' 
    {
        createLeafNode(grammarAccess.getRecordOperationAccess().getExcludeKeyword_0_1(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRecordOperationAccess().getFieldFieldNameCrossReference_0_2_0(), "field"); 
	}

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRecordOperationAccess().getRecordRenameAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRecordOperationAccess().getRecordRenameAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRecordOperationAccess().getOriginalFieldFieldNameCrossReference_1_1_0(), "originalField"); 
	}

)
)	'renameTo' 
    {
        createLeafNode(grammarAccess.getRecordOperationAccess().getRenameToKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecordOperationAccess().getNewFieldFieldNameParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_newField_6_0=ruleFieldName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"newField",
	        		lv_newField_6_0, 
	        		"FieldName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRecordOperationAccess().getRecordRenameAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRecordOperationAccess().getRecordRenameAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRecordOperationAccess().getOriginalFieldFieldNameCrossReference_2_1_0(), "originalField"); 
	}

)
)	'renameF' 
    {
        createLeafNode(grammarAccess.getRecordOperationAccess().getRenameFKeyword_2_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRecordOperationAccess().getNewFieldFieldNameParserRuleCall_2_3_0(), currentNode); 
	    }
		lv_newField_10_0=ruleFieldName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRecordOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"newField",
	        		lv_newField_10_0, 
	        		"FieldName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleTraitExpression
entryRuleTraitExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraitExpressionRule(), currentNode); }
	 iv_ruleTraitExpression=ruleTraitExpression 
	 { $current=$iv_ruleTraitExpression.current; } 
	 EOF 
;

// Rule TraitExpression
ruleTraitExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitExpressionAccess().getTraitListBaseTraitParserRuleCall_0_0(), currentNode); 
	    }
		lv_traitList_0_0=ruleBaseTrait		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traitList",
	        		lv_traitList_0_0, 
	        		"BaseTrait", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'+' 
    {
        createLeafNode(grammarAccess.getTraitExpressionAccess().getPlusSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitExpressionAccess().getTraitListBaseTraitParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_traitList_2_0=ruleBaseTrait		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"traitList",
	        		lv_traitList_2_0, 
	        		"BaseTrait", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleBaseTrait
entryRuleBaseTrait returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBaseTraitRule(), currentNode); }
	 iv_ruleBaseTrait=ruleBaseTrait 
	 { $current=$iv_ruleBaseTrait.current; } 
	 EOF 
;

// Rule BaseTrait
ruleBaseTrait returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBaseTraitAccess().getAnonimousTraitParserRuleCall_0(), currentNode); 
    }
    this_AnonimousTrait_0=ruleAnonimousTrait
    { 
        $current = $this_AnonimousTrait_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBaseTraitAccess().getTraitNameParserRuleCall_1(), currentNode); 
    }
    this_TraitName_1=ruleTraitName
    { 
        $current = $this_TraitName_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBaseTraitAccess().getNestedTraitExpressionParserRuleCall_2(), currentNode); 
    }
    this_NestedTraitExpression_2=ruleNestedTraitExpression
    { 
        $current = $this_NestedTraitExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAnonimousTrait
entryRuleAnonimousTrait returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnonimousTraitRule(), currentNode); }
	 iv_ruleAnonimousTrait=ruleAnonimousTrait 
	 { $current=$iv_ruleAnonimousTrait.current; } 
	 EOF 
;

// Rule AnonimousTrait
ruleAnonimousTrait returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getAnonimousTraitAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAnonimousTraitAccess().getAnonimousTraitAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAnonimousTraitAccess().getAnonimousTraitAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnonimousTraitAccess().getDefinitionListTraitElementParserRuleCall_2_0(), currentNode); 
	    }
		lv_definitionList_2_0=ruleTraitElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnonimousTraitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"definitionList",
	        		lv_definitionList_2_0, 
	        		"TraitElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getAnonimousTraitAccess().getRightCurlyBracketKeyword_3(), null); 
    }
(	'[' 
    {
        createLeafNode(grammarAccess.getAnonimousTraitAccess().getLeftSquareBracketKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnonimousTraitAccess().getOperationListTraitOperationParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_operationList_5_0=ruleTraitOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnonimousTraitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_5_0, 
	        		"TraitOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAnonimousTraitAccess().getCommaKeyword_4_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnonimousTraitAccess().getOperationListTraitOperationParserRuleCall_4_2_1_0(), currentNode); 
	    }
		lv_operationList_7_0=ruleTraitOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnonimousTraitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_7_0, 
	        		"TraitOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getAnonimousTraitAccess().getRightSquareBracketKeyword_4_3(), null); 
    }
)?)
;





// Entry rule entryRuleTraitName
entryRuleTraitName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraitNameRule(), currentNode); }
	 iv_ruleTraitName=ruleTraitName 
	 { $current=$iv_ruleTraitName.current; } 
	 EOF 
;

// Rule TraitName
ruleTraitName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTraitNameAccess().getTraitTraitCrossReference_0_0(), "trait"); 
	}

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getTraitNameAccess().getLeftSquareBracketKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitNameAccess().getOperationListTraitOperationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_operationList_2_0=ruleTraitOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_2_0, 
	        		"TraitOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTraitNameAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitNameAccess().getOperationListTraitOperationParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_operationList_4_0=ruleTraitOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_4_0, 
	        		"TraitOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getTraitNameAccess().getRightSquareBracketKeyword_1_3(), null); 
    }
)?)
;





// Entry rule entryRuleNestedTraitExpression
entryRuleNestedTraitExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNestedTraitExpressionRule(), currentNode); }
	 iv_ruleNestedTraitExpression=ruleNestedTraitExpression 
	 { $current=$iv_ruleNestedTraitExpression.current; } 
	 EOF 
;

// Rule NestedTraitExpression
ruleNestedTraitExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getNestedTraitExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedTraitExpressionAccess().getExpressionTraitExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleTraitExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedTraitExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"TraitExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getNestedTraitExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
(	'[' 
    {
        createLeafNode(grammarAccess.getNestedTraitExpressionAccess().getLeftSquareBracketKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedTraitExpressionAccess().getOperationListTraitOperationParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_operationList_4_0=ruleTraitOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedTraitExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_4_0, 
	        		"TraitOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getNestedTraitExpressionAccess().getCommaKeyword_3_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedTraitExpressionAccess().getOperationListTraitOperationParserRuleCall_3_2_1_0(), currentNode); 
	    }
		lv_operationList_6_0=ruleTraitOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedTraitExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operationList",
	        		lv_operationList_6_0, 
	        		"TraitOperation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getNestedTraitExpressionAccess().getRightSquareBracketKeyword_3_3(), null); 
    }
)?)
;





// Entry rule entryRuleTraitOperation
entryRuleTraitOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraitOperationRule(), currentNode); }
	 iv_ruleTraitOperation=ruleTraitOperation 
	 { $current=$iv_ruleTraitOperation.current; } 
	 EOF 
;

// Rule TraitOperation
ruleTraitOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTraitOperationAccess().getTraitExcludeAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTraitOperationAccess().getTraitExcludeAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'exclude' 
    {
        createLeafNode(grammarAccess.getTraitOperationAccess().getExcludeKeyword_0_1(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTraitOperationAccess().getMethodMethodNameCrossReference_0_2_0(), "method"); 
	}

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTraitOperationAccess().getTraitAliasAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTraitOperationAccess().getTraitAliasAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTraitOperationAccess().getOriginalMethodMethodNameCrossReference_1_1_0(), "originalMethod"); 
	}

)
)	'aliasAs' 
    {
        createLeafNode(grammarAccess.getTraitOperationAccess().getAliasAsKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitOperationAccess().getNewMethodMethodNameParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_newMethod_6_0=ruleMethodName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"newMethod",
	        		lv_newMethod_6_0, 
	        		"MethodName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTraitOperationAccess().getTraitMethodRenameAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTraitOperationAccess().getTraitMethodRenameAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTraitOperationAccess().getOriginalMethodMethodNameCrossReference_2_1_0(), "originalMethod"); 
	}

)
)	'renameTo' 
    {
        createLeafNode(grammarAccess.getTraitOperationAccess().getRenameToKeyword_2_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitOperationAccess().getNewMethodMethodNameParserRuleCall_2_3_0(), currentNode); 
	    }
		lv_newMethod_10_0=ruleMethodName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"newMethod",
	        		lv_newMethod_10_0, 
	        		"MethodName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTraitOperationAccess().getTraitMethodRenameAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTraitOperationAccess().getTraitMethodRenameAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTraitOperationAccess().getOriginalMethodMethodNameCrossReference_3_1_0(), "originalMethod"); 
	}

)
)	'renameM' 
    {
        createLeafNode(grammarAccess.getTraitOperationAccess().getRenameMKeyword_3_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitOperationAccess().getNewMethodMethodNameParserRuleCall_3_3_0(), currentNode); 
	    }
		lv_newMethod_14_0=ruleMethodName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"newMethod",
	        		lv_newMethod_14_0, 
	        		"MethodName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTraitOperationAccess().getTraitFieldRenameAction_4_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTraitOperationAccess().getTraitFieldRenameAction_4_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTraitOperationAccess().getOriginalFieldFieldNameCrossReference_4_1_0(), "originalField"); 
	}

)
)	'renameFieldTo' 
    {
        createLeafNode(grammarAccess.getTraitOperationAccess().getRenameFieldToKeyword_4_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitOperationAccess().getNewFieldFieldNameParserRuleCall_4_3_0(), currentNode); 
	    }
		lv_newField_18_0=ruleFieldName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"newField",
	        		lv_newField_18_0, 
	        		"FieldName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTraitOperationAccess().getTraitFieldRenameAction_5_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTraitOperationAccess().getTraitFieldRenameAction_5_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTraitOperationAccess().getOriginalFieldFieldNameCrossReference_5_1_0(), "originalField"); 
	}

)
)	'renameF' 
    {
        createLeafNode(grammarAccess.getTraitOperationAccess().getRenameFKeyword_5_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTraitOperationAccess().getNewFieldFieldNameParserRuleCall_5_3_0(), currentNode); 
	    }
		lv_newField_22_0=ruleFieldName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTraitOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"newField",
	        		lv_newField_22_0, 
	        		"FieldName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleTraitElement
entryRuleTraitElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTraitElementRule(), currentNode); }
	 iv_ruleTraitElement=ruleTraitElement 
	 { $current=$iv_ruleTraitElement.current; } 
	 EOF 
;

// Rule TraitElement
ruleTraitElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTraitElementAccess().getRequiredFieldParserRuleCall_0(), currentNode); 
    }
    this_RequiredField_0=ruleRequiredField
    { 
        $current = $this_RequiredField_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTraitElementAccess().getRequiredMethodParserRuleCall_1(), currentNode); 
    }
    this_RequiredMethod_1=ruleRequiredMethod
    { 
        $current = $this_RequiredMethod_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTraitElementAccess().getProvidedMethodParserRuleCall_2(), currentNode); 
    }
    this_ProvidedMethod_2=ruleProvidedMethod
    { 
        $current = $this_ProvidedMethod_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleFieldDeclaration
entryRuleFieldDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldDeclarationRule(), currentNode); }
	 iv_ruleFieldDeclaration=ruleFieldDeclaration 
	 { $current=$iv_ruleFieldDeclaration.current; } 
	 EOF 
;

// Rule FieldDeclaration
ruleFieldDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getFieldDeclarationAccess().getFieldDeclarationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFieldDeclarationAccess().getFieldDeclarationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		lv_modifier_1_0=	'transient' 
    {
        createLeafNode(grammarAccess.getFieldDeclarationAccess().getModifierTransientKeyword_1_0_0(), "modifier"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "modifier", lv_modifier_1_0, "transient", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_modifier_2_0=	'volatile' 
    {
        createLeafNode(grammarAccess.getFieldDeclarationAccess().getModifierVolatileKeyword_1_1_0(), "modifier"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "modifier", lv_modifier_2_0, "volatile", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getTypeTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getFieldRefFieldNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_fieldRef_4_0=ruleFieldName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fieldRef",
	        		lv_fieldRef_4_0, 
	        		"FieldName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleRequiredField
entryRuleRequiredField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRequiredFieldRule(), currentNode); }
	 iv_ruleRequiredField=ruleRequiredField 
	 { $current=$iv_ruleRequiredField.current; } 
	 EOF 
;

// Rule RequiredField
ruleRequiredField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRequiredFieldAccess().getRequiredFieldAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRequiredFieldAccess().getRequiredFieldAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredFieldAccess().getTypeTypeParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredFieldAccess().getFieldRefFieldNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_fieldRef_2_0=ruleFieldName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fieldRef",
	        		lv_fieldRef_2_0, 
	        		"FieldName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getRequiredFieldAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleRequiredMethod
entryRuleRequiredMethod returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRequiredMethodRule(), currentNode); }
	 iv_ruleRequiredMethod=ruleRequiredMethod 
	 { $current=$iv_ruleRequiredMethod.current; } 
	 EOF 
;

// Rule RequiredMethod
ruleRequiredMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getRequiredMethodAccess().getRequiredMethodAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRequiredMethodAccess().getRequiredMethodAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredMethodAccess().getReturnTypeReturnTypeParserRuleCall_1_0(), currentNode); 
	    }
		lv_returnType_1_0=ruleReturnType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnType",
	        		lv_returnType_1_0, 
	        		"ReturnType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredMethodAccess().getMethodRefMethodNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_methodRef_2_0=ruleMethodName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"methodRef",
	        		lv_methodRef_2_0, 
	        		"MethodName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getRequiredMethodAccess().getLeftParenthesisKeyword_3(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredMethodAccess().getParameterListParameterParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_parameterList_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_4_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRequiredMethodAccess().getCommaKeyword_4_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredMethodAccess().getParameterListParameterParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_parameterList_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_6_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getRequiredMethodAccess().getRightParenthesisKeyword_5(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getRequiredMethodAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleProvidedMethod
entryRuleProvidedMethod returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProvidedMethodRule(), currentNode); }
	 iv_ruleProvidedMethod=ruleProvidedMethod 
	 { $current=$iv_ruleProvidedMethod.current; } 
	 EOF 
;

// Rule ProvidedMethod
ruleProvidedMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getProvidedMethodAccess().getProvidedMethodAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getProvidedMethodAccess().getProvidedMethodAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_isSynchronized_1_0=	'synchronized' 
    {
        createLeafNode(grammarAccess.getProvidedMethodAccess().getIsSynchronizedSynchronizedKeyword_1_0(), "isSynchronized"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isSynchronized", true, "synchronized", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedMethodAccess().getReturnTypeReturnTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_returnType_2_0=ruleReturnType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnType",
	        		lv_returnType_2_0, 
	        		"ReturnType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedMethodAccess().getMethodRefMethodNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_methodRef_3_0=ruleMethodName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"methodRef",
	        		lv_methodRef_3_0, 
	        		"MethodName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getProvidedMethodAccess().getLeftParenthesisKeyword_4(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedMethodAccess().getParameterListParameterParserRuleCall_5_0_0(), currentNode); 
	    }
		lv_parameterList_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_5_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getProvidedMethodAccess().getCommaKeyword_5_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedMethodAccess().getParameterListParameterParserRuleCall_5_1_1_0(), currentNode); 
	    }
		lv_parameterList_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_7_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getProvidedMethodAccess().getRightParenthesisKeyword_6(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getProvidedMethodAccess().getLeftCurlyBracketKeyword_7(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedMethodAccess().getBlockBlockParserRuleCall_8_0(), currentNode); 
	    }
		lv_block_10_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_10_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProvidedMethodAccess().getReturnStatementReturnStatementParserRuleCall_9_0(), currentNode); 
	    }
		lv_returnStatement_11_0=ruleReturnStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProvidedMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnStatement",
	        		lv_returnStatement_11_0, 
	        		"ReturnStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'}' 
    {
        createLeafNode(grammarAccess.getProvidedMethodAccess().getRightCurlyBracketKeyword_10(), null); 
    }
)
;





// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstructorRule(), currentNode); }
	 iv_ruleConstructor=ruleConstructor 
	 { $current=$iv_ruleConstructor.current; } 
	 EOF 
;

// Rule Constructor
ruleConstructor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConstructorAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorAccess().getParameterListParameterParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_parameterList_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_2_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorAccess().getParameterListParameterParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_parameterList_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_4_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorAccess().getBlockBlockParserRuleCall_5_0(), currentNode); 
	    }
		lv_block_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_7_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReturnStatementRule(), currentNode); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'return' 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getReturnKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getParameterAccess().getFormalParameterAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParameterAccess().getFormalParameterAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleFieldName
entryRuleFieldName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldNameRule(), currentNode); }
	 iv_ruleFieldName=ruleFieldName 
	 { $current=$iv_ruleFieldName.current; } 
	 EOF 
;

// Rule FieldName
ruleFieldName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFieldNameAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleMethodName
entryRuleMethodName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodNameRule(), currentNode); }
	 iv_ruleMethodName=ruleMethodName 
	 { $current=$iv_ruleMethodName.current; } 
	 EOF 
;

// Rule MethodName
ruleMethodName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMethodNameAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTypeAccess().getInterfaceTypeInterfaceCrossReference_0_0(), "interfaceType"); 
	}

)
)
    |(
(
		lv_primitiveType_1_0=	'byte' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getPrimitiveTypeByteKeyword_1_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_1_0, "byte", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_2_0=	'char' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getPrimitiveTypeCharKeyword_2_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_2_0, "char", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_3_0=	'boolean' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getPrimitiveTypeBooleanKeyword_3_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_3_0, "boolean", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_4_0=	'short' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getPrimitiveTypeShortKeyword_4_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_4_0, "short", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_5_0=	'int' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getPrimitiveTypeIntKeyword_5_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_5_0, "int", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_6_0=	'long' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getPrimitiveTypeLongKeyword_6_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_6_0, "long", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_7_0=	'float' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getPrimitiveTypeFloatKeyword_7_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_7_0, "float", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_8_0=	'double' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getPrimitiveTypeDoubleKeyword_8_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_8_0, "double", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleReturnType
entryRuleReturnType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReturnTypeRule(), currentNode); }
	 iv_ruleReturnType=ruleReturnType 
	 { $current=$iv_ruleReturnType.current; } 
	 EOF 
;

// Rule ReturnType
ruleReturnType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getReturnTypeAccess().getInterfaceTypeInterfaceCrossReference_0_0(), "interfaceType"); 
	}

)
)
    |(
(
		lv_primitiveType_1_0=	'byte' 
    {
        createLeafNode(grammarAccess.getReturnTypeAccess().getPrimitiveTypeByteKeyword_1_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_1_0, "byte", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_2_0=	'char' 
    {
        createLeafNode(grammarAccess.getReturnTypeAccess().getPrimitiveTypeCharKeyword_2_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_2_0, "char", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_3_0=	'boolean' 
    {
        createLeafNode(grammarAccess.getReturnTypeAccess().getPrimitiveTypeBooleanKeyword_3_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_3_0, "boolean", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_4_0=	'short' 
    {
        createLeafNode(grammarAccess.getReturnTypeAccess().getPrimitiveTypeShortKeyword_4_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_4_0, "short", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_5_0=	'int' 
    {
        createLeafNode(grammarAccess.getReturnTypeAccess().getPrimitiveTypeIntKeyword_5_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_5_0, "int", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_6_0=	'long' 
    {
        createLeafNode(grammarAccess.getReturnTypeAccess().getPrimitiveTypeLongKeyword_6_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_6_0, "long", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_7_0=	'float' 
    {
        createLeafNode(grammarAccess.getReturnTypeAccess().getPrimitiveTypeFloatKeyword_7_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_7_0, "float", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_8_0=	'double' 
    {
        createLeafNode(grammarAccess.getReturnTypeAccess().getPrimitiveTypeDoubleKeyword_8_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_8_0, "double", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_primitiveType_9_0=	'void' 
    {
        createLeafNode(grammarAccess.getReturnTypeAccess().getPrimitiveTypeVoidKeyword_9_0(), "primitiveType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "primitiveType", lv_primitiveType_9_0, "void", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBlockAccess().getBlockAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBlockAccess().getBlockAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getParameterListLocalParameterParserRuleCall_1_0(), currentNode); 
	    }
		lv_parameterList_1_0=ruleLocalParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameterList",
	        		lv_parameterList_1_0, 
	        		"LocalParameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getStatementListStatementParserRuleCall_2_0(), currentNode); 
	    }
		lv_statementList_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statementList",
	        		lv_statementList_2_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_0(), currentNode); 
    }
    this_ExpressionStatement_0=ruleExpressionStatement
    { 
        $current = $this_ExpressionStatement_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getIfThenElseStatementParserRuleCall_1(), currentNode); 
    }
    this_IfThenElseStatement_1=ruleIfThenElseStatement
    { 
        $current = $this_IfThenElseStatement_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_2(), currentNode); 
    }
    this_WhileStatement_2=ruleWhileStatement
    { 
        $current = $this_WhileStatement_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionStatementRule(), currentNode); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_0_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleIfThenElseStatement
entryRuleIfThenElseStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfThenElseStatementRule(), currentNode); }
	 iv_ruleIfThenElseStatement=ruleIfThenElseStatement 
	 { $current=$iv_ruleIfThenElseStatement.current; } 
	 EOF 
;

// Rule IfThenElseStatement
ruleIfThenElseStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIfThenElseStatementAccess().getIfKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getIfThenElseStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfThenElseStatementAccess().getCondictionBooleanExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_condiction_2_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfThenElseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condiction",
	        		lv_condiction_2_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getIfThenElseStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getIfThenElseStatementAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfThenElseStatementAccess().getTrueBranchBlockParserRuleCall_5_0(), currentNode); 
	    }
		lv_trueBranch_5_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfThenElseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"trueBranch",
	        		lv_trueBranch_5_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getIfThenElseStatementAccess().getRightCurlyBracketKeyword_6(), null); 
    }
(	'else' 
    {
        createLeafNode(grammarAccess.getIfThenElseStatementAccess().getElseKeyword_7_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getIfThenElseStatementAccess().getLeftCurlyBracketKeyword_7_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfThenElseStatementAccess().getFalseBranchBlockParserRuleCall_7_2_0(), currentNode); 
	    }
		lv_falseBranch_9_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfThenElseStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"falseBranch",
	        		lv_falseBranch_9_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getIfThenElseStatementAccess().getRightCurlyBracketKeyword_7_3(), null); 
    }
)?)
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhileStatementRule(), currentNode); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'while' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getWhileKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getCondictionBooleanExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_condiction_2_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condiction",
	        		lv_condiction_2_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getWhileBlockBlockParserRuleCall_5_0(), currentNode); 
	    }
		lv_whileBlock_5_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whileBlock",
	        		lv_whileBlock_5_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanExpressionRule(), currentNode); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBooleanExpressionAccess().getBooleanExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getAtomicListAtomicBooleanExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_atomicList_1_0=ruleAtomicBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"atomicList",
	        		lv_atomicList_1_0, 
	        		"AtomicBooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanOperatorListBooleanOperatorParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_booleanOperatorList_2_0=ruleBooleanOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"booleanOperatorList",
	        		lv_booleanOperatorList_2_0, 
	        		"BooleanOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getAtomicListAtomicBooleanExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_atomicList_3_0=ruleAtomicBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"atomicList",
	        		lv_atomicList_3_0, 
	        		"AtomicBooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleBooleanOperator
entryRuleBooleanOperator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanOperatorRule(), currentNode); }
	 iv_ruleBooleanOperator=ruleBooleanOperator 
	 { $current=$iv_ruleBooleanOperator.current; } 
	 EOF 
;

// Rule BooleanOperator
ruleBooleanOperator returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_operator_0_0=	'&' 
    {
        createLeafNode(grammarAccess.getBooleanOperatorAccess().getOperatorAmpersandKeyword_0_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_0_0, "&", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_operator_1_0=	'&&' 
    {
        createLeafNode(grammarAccess.getBooleanOperatorAccess().getOperatorAmpersandAmpersandKeyword_1_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1_0, "&&", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_operator_2_0=	'|' 
    {
        createLeafNode(grammarAccess.getBooleanOperatorAccess().getOperatorVerticalLineKeyword_2_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_2_0, "|", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_operator_3_0=	'||' 
    {
        createLeafNode(grammarAccess.getBooleanOperatorAccess().getOperatorVerticalLineVerticalLineKeyword_3_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_3_0, "||", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_operator_4_0=	'^' 
    {
        createLeafNode(grammarAccess.getBooleanOperatorAccess().getOperatorCircumflexAccentKeyword_4_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_4_0, "^", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleAtomicBooleanExpression
entryRuleAtomicBooleanExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomicBooleanExpressionRule(), currentNode); }
	 iv_ruleAtomicBooleanExpression=ruleAtomicBooleanExpression 
	 { $current=$iv_ruleAtomicBooleanExpression.current; } 
	 EOF 
;

// Rule AtomicBooleanExpression
ruleAtomicBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicBooleanExpressionAccess().getSimpleComparationParserRuleCall_0(), currentNode); 
    }
    this_SimpleComparation_0=ruleSimpleComparation
    { 
        $current = $this_SimpleComparation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicBooleanExpressionAccess().getNestedBooleanExpressionParserRuleCall_1(), currentNode); 
    }
    this_NestedBooleanExpression_1=ruleNestedBooleanExpression
    { 
        $current = $this_NestedBooleanExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSimpleComparation
entryRuleSimpleComparation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleComparationRule(), currentNode); }
	 iv_ruleSimpleComparation=ruleSimpleComparation 
	 { $current=$iv_ruleSimpleComparation.current; } 
	 EOF 
;

// Rule SimpleComparation
ruleSimpleComparation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_negated_0_0=	'!' 
    {
        createLeafNode(grammarAccess.getSimpleComparationAccess().getNegatedExclamationMarkKeyword_0_0(), "negated"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleComparationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "negated", true, "!", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleComparationAccess().getLeftExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_leftExpression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleComparationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"leftExpression",
	        		lv_leftExpression_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleComparationAccess().getCompareCompareOperatorParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_compare_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleComparationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"compare",
	        		lv_compare_2_0, 
	        		"CompareOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleComparationAccess().getRightExpressionExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_rightExpression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleComparationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightExpression",
	        		lv_rightExpression_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleNestedBooleanExpression
entryRuleNestedBooleanExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNestedBooleanExpressionRule(), currentNode); }
	 iv_ruleNestedBooleanExpression=ruleNestedBooleanExpression 
	 { $current=$iv_ruleNestedBooleanExpression.current; } 
	 EOF 
;

// Rule NestedBooleanExpression
ruleNestedBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_negated_0_0=	'!' 
    {
        createLeafNode(grammarAccess.getNestedBooleanExpressionAccess().getNegatedExclamationMarkKeyword_0_0(), "negated"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedBooleanExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "negated", true, "!", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'(' 
    {
        createLeafNode(grammarAccess.getNestedBooleanExpressionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedBooleanExpressionAccess().getNestedExpressionBooleanExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_nestedExpression_2_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedBooleanExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nestedExpression",
	        		lv_nestedExpression_2_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getNestedBooleanExpressionAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleCompareOperator
entryRuleCompareOperator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompareOperatorRule(), currentNode); }
	 iv_ruleCompareOperator=ruleCompareOperator 
	 { $current=$iv_ruleCompareOperator.current; } 
	 EOF 
;

// Rule CompareOperator
ruleCompareOperator returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_operator_0_0=	'<' 
    {
        createLeafNode(grammarAccess.getCompareOperatorAccess().getOperatorLessThanSignKeyword_0_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_0_0, "<", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_operator_1_0=	'<=' 
    {
        createLeafNode(grammarAccess.getCompareOperatorAccess().getOperatorLessThanSignEqualsSignKeyword_1_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1_0, "<=", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_operator_2_0=	'==' 
    {
        createLeafNode(grammarAccess.getCompareOperatorAccess().getOperatorEqualsSignEqualsSignKeyword_2_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_2_0, "==", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_operator_3_0=	'!=' 
    {
        createLeafNode(grammarAccess.getCompareOperatorAccess().getOperatorExclamationMarkEqualsSignKeyword_3_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_3_0, "!=", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_operator_4_0=	'>' 
    {
        createLeafNode(grammarAccess.getCompareOperatorAccess().getOperatorGreaterThanSignKeyword_4_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_4_0, ">", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_operator_5_0=	'>=' 
    {
        createLeafNode(grammarAccess.getCompareOperatorAccess().getOperatorGreaterThanSignEqualsSignKeyword_5_0(), "operator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_5_0, ">=", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleLocalParameter
entryRuleLocalParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocalParameterRule(), currentNode); }
	 iv_ruleLocalParameter=ruleLocalParameter 
	 { $current=$iv_ruleLocalParameter.current; } 
	 EOF 
;

// Rule LocalParameter
ruleLocalParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getLocalParameterAccess().getLocalParameterAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLocalParameterAccess().getLocalParameterAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalParameterAccess().getTypeTypeParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLocalParameterAccess().getNameIDTerminalRuleCall_0_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getLocalParameterAccess().getEqualsSignKeyword_0_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalParameterAccess().getValueExpressionParserRuleCall_0_4_0(), currentNode); 
	    }
		lv_value_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getLocalParameterAccess().getSemicolonKeyword_0_5(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getLocalParameterAccess().getLocalParameterAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLocalParameterAccess().getLocalParameterAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalParameterAccess().getTypeTypeParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_type_7_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_7_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_8_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLocalParameterAccess().getNameIDTerminalRuleCall_1_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_8_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getLocalParameterAccess().getEqualsSignKeyword_1_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalParameterAccess().getValueBooleanExpressionParserRuleCall_1_4_0(), currentNode); 
	    }
		lv_value_10_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_10_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getLocalParameterAccess().getSemicolonKeyword_1_5(), null); 
    }
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getExpressionAccess().getExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionAccess().getExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		lv_sign_1_0=	'-' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getSignHyphenMinusKeyword_1_0_0(), "sign"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sign", lv_sign_1_0, "-", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_sign_2_0=	'+' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getSignPlusSignKeyword_1_1_0(), "sign"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sign", lv_sign_2_0, "+", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getTermListDottedExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_termList_3_0=ruleDottedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"termList",
	        		lv_termList_3_0, 
	        		"DottedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_operatorList_4_1=	'+' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOperatorListPlusSignKeyword_3_0_0_0(), "operatorList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operatorList", lv_operatorList_4_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_operatorList_4_2=	'-' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOperatorListHyphenMinusKeyword_3_0_0_1(), "operatorList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operatorList", lv_operatorList_4_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_operatorList_4_3=	'*' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOperatorListAsteriskKeyword_3_0_0_2(), "operatorList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operatorList", lv_operatorList_4_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_operatorList_4_4=	'/' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOperatorListSolidusKeyword_3_0_0_3(), "operatorList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operatorList", lv_operatorList_4_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_operatorList_4_5=	'%' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOperatorListPercentSignKeyword_3_0_0_4(), "operatorList"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operatorList", lv_operatorList_4_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getTermListDottedExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_termList_5_0=ruleDottedExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"termList",
	        		lv_termList_5_0, 
	        		"DottedExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleDottedExpression
entryRuleDottedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDottedExpressionRule(), currentNode); }
	 iv_ruleDottedExpression=ruleDottedExpression 
	 { $current=$iv_ruleDottedExpression.current; } 
	 EOF 
;

// Rule DottedExpression
ruleDottedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDottedExpressionAccess().getStartStartParserRuleCall_0_0(), currentNode); 
	    }
		lv_start_0_0=ruleStart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDottedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"start",
	        		lv_start_0_0, 
	        		"Start", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getDottedExpressionAccess().getDottedExpressionReceiverAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "receiver", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDottedExpressionAccess().getDottedExpressionReceiverAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getDottedExpressionAccess().getFullStopKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDottedExpressionAccess().getMessageMessageParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_message_3_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDottedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"message",
	        		lv_message_3_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getDottedExpressionAccess().getDottedExpressionReceiverAction_2_0().getType().getClassifier());
        try {
        	factory.set(temp, "receiver", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDottedExpressionAccess().getDottedExpressionReceiverAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getDottedExpressionAccess().getFullStopKeyword_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDottedExpressionAccess().getMessageFieldAccessParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_message_6_0=ruleFieldAccess		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDottedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"message",
	        		lv_message_6_0, 
	        		"FieldAccess", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getDottedExpressionAccess().getEqualsSignKeyword_2_3_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDottedExpressionAccess().getValueExpressionParserRuleCall_2_3_1_0_0(), currentNode); 
	    }
		lv_value_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDottedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_8_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDottedExpressionAccess().getValueBooleanExpressionParserRuleCall_2_3_1_1_0(), currentNode); 
	    }
		lv_value_9_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDottedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_9_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)?)
;





// Entry rule entryRuleStart
entryRuleStart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStartRule(), currentNode); }
	 iv_ruleStart=ruleStart 
	 { $current=$iv_ruleStart.current; } 
	 EOF 
;

// Rule Start
ruleStart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getNullParserRuleCall_0(), currentNode); 
    }
    this_Null_0=ruleNull
    { 
        $current = $this_Null_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getOutputParserRuleCall_1(), currentNode); 
    }
    this_Output_1=ruleOutput
    { 
        $current = $this_Output_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getInputParserRuleCall_2(), currentNode); 
    }
    this_Input_2=ruleInput
    { 
        $current = $this_Input_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getArgsParserRuleCall_3(), currentNode); 
    }
    this_Args_3=ruleArgs
    { 
        $current = $this_Args_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getBooleanConstantParserRuleCall_4(), currentNode); 
    }
    this_BooleanConstant_4=ruleBooleanConstant
    { 
        $current = $this_BooleanConstant_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getNumberParserRuleCall_5(), currentNode); 
    }
    this_Number_5=ruleNumber
    { 
        $current = $this_Number_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getStringConstantParserRuleCall_6(), currentNode); 
    }
    this_StringConstant_6=ruleStringConstant
    { 
        $current = $this_StringConstant_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getCastParserRuleCall_7(), currentNode); 
    }
    this_Cast_7=ruleCast
    { 
        $current = $this_Cast_7.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getThisParserRuleCall_8(), currentNode); 
    }
    this_This_8=ruleThis
    { 
        $current = $this_This_8.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getParameterReferenceParserRuleCall_9(), currentNode); 
    }
    this_ParameterReference_9=ruleParameterReference
    { 
        $current = $this_ParameterReference_9.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getConstructorInvocationParserRuleCall_10(), currentNode); 
    }
    this_ConstructorInvocation_10=ruleConstructorInvocation
    { 
        $current = $this_ConstructorInvocation_10.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getNestedExpressionParserRuleCall_11(), currentNode); 
    }
    this_NestedExpression_11=ruleNestedExpression
    { 
        $current = $this_NestedExpression_11.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStartAccess().getParameterAssignmentParserRuleCall_12(), currentNode); 
    }
    this_ParameterAssignment_12=ruleParameterAssignment
    { 
        $current = $this_ParameterAssignment_12.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNull
entryRuleNull returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullRule(), currentNode); }
	 iv_ruleNull=ruleNull 
	 { $current=$iv_ruleNull.current; } 
	 EOF 
;

// Rule Null
ruleNull returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_null_0_0=	'null' 
    {
        createLeafNode(grammarAccess.getNullAccess().getNullNullKeyword_0(), "null"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "null", true, "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInputRule(), currentNode); }
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current; } 
	 EOF 
;

// Rule Input
ruleInput returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_input_0_0=	'in' 
    {
        createLeafNode(grammarAccess.getInputAccess().getInputInKeyword_0(), "input"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "input", true, "in", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleArgs
entryRuleArgs returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArgsRule(), currentNode); }
	 iv_ruleArgs=ruleArgs 
	 { $current=$iv_ruleArgs.current; } 
	 EOF 
;

// Rule Args
ruleArgs returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_args_0_0=	'args' 
    {
        createLeafNode(grammarAccess.getArgsAccess().getArgsArgsKeyword_0(), "args"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "args", true, "args", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOutputRule(), currentNode); }
	 iv_ruleOutput=ruleOutput 
	 { $current=$iv_ruleOutput.current; } 
	 EOF 
;

// Rule Output
ruleOutput returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_output_0_0=	'out' 
    {
        createLeafNode(grammarAccess.getOutputAccess().getOutputOutKeyword_0(), "output"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "output", true, "out", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleBooleanConstant
entryRuleBooleanConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanConstantRule(), currentNode); }
	 iv_ruleBooleanConstant=ruleBooleanConstant 
	 { $current=$iv_ruleBooleanConstant.current; } 
	 EOF 
;

// Rule BooleanConstant
ruleBooleanConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'true' 
    {
        createLeafNode(grammarAccess.getBooleanConstantAccess().getValueTrueKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=	'false' 
    {
        createLeafNode(grammarAccess.getBooleanConstantAccess().getValueFalseKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "false", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumberRule(), currentNode); }
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current; } 
	 EOF 
;

// Rule Number
ruleNumber returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumberRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleStringConstant
entryRuleStringConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringConstantRule(), currentNode); }
	 iv_ruleStringConstant=ruleStringConstant 
	 { $current=$iv_ruleStringConstant.current; } 
	 EOF 
;

// Rule StringConstant
ruleStringConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringConstantAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleThis
entryRuleThis returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getThisRule(), currentNode); }
	 iv_ruleThis=ruleThis 
	 { $current=$iv_ruleThis.current; } 
	 EOF 
;

// Rule This
ruleThis returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_this_0_0=	'this' 
    {
        createLeafNode(grammarAccess.getThisAccess().getThisThisKeyword_0(), "this"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThisRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "this", true, "this", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleParameterReference
entryRuleParameterReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterReferenceRule(), currentNode); }
	 iv_ruleParameterReference=ruleParameterReference 
	 { $current=$iv_ruleParameterReference.current; } 
	 EOF 
;

// Rule ParameterReference
ruleParameterReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getParameterReferenceAccess().getParameterParameterCrossReference_0(), "parameter"); 
	}

)
)
;





// Entry rule entryRuleConstructorInvocation
entryRuleConstructorInvocation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstructorInvocationRule(), currentNode); }
	 iv_ruleConstructorInvocation=ruleConstructorInvocation 
	 { $current=$iv_ruleConstructorInvocation.current; } 
	 EOF 
;

// Rule ConstructorInvocation
ruleConstructorInvocation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'new' 
    {
        createLeafNode(grammarAccess.getConstructorInvocationAccess().getNewKeyword_0(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConstructorInvocationAccess().getClassRefClassCrossReference_1_0(), "classRef"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getConstructorInvocationAccess().getLeftParenthesisKeyword_2(), null); 
    }
((((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorInvocationAccess().getArgumentListExpressionParserRuleCall_3_0_0_0_0(), currentNode); 
	    }
		lv_argumentList_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argumentList",
	        		lv_argumentList_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorInvocationAccess().getArgumentListBooleanExpressionParserRuleCall_3_0_0_1_0(), currentNode); 
	    }
		lv_argumentList_4_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argumentList",
	        		lv_argumentList_4_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))	',' 
    {
        createLeafNode(grammarAccess.getConstructorInvocationAccess().getCommaKeyword_3_0_1(), null); 
    }
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorInvocationAccess().getArgumentListExpressionParserRuleCall_3_1_0_0(), currentNode); 
	    }
		lv_argumentList_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argumentList",
	        		lv_argumentList_6_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorInvocationAccess().getArgumentListBooleanExpressionParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_argumentList_7_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argumentList",
	        		lv_argumentList_7_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?	')' 
    {
        createLeafNode(grammarAccess.getConstructorInvocationAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleCast
entryRuleCast returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCastRule(), currentNode); }
	 iv_ruleCast=ruleCast 
	 { $current=$iv_ruleCast.current; } 
	 EOF 
;

// Rule Cast
ruleCast returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getCastAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCastAccess().getTypeTypeParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCastRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getCastAccess().getRightParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCastAccess().getStartStartParserRuleCall_3_0(), currentNode); 
	    }
		lv_start_3_0=ruleStart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCastRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"start",
	        		lv_start_3_0, 
	        		"Start", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNestedExpression
entryRuleNestedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNestedExpressionRule(), currentNode); }
	 iv_ruleNestedExpression=ruleNestedExpression 
	 { $current=$iv_ruleNestedExpression.current; } 
	 EOF 
;

// Rule NestedExpression
ruleNestedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getNestedExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedExpressionAccess().getExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getNestedExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMessageRule(), currentNode); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getMethodInvocationParserRuleCall_0(), currentNode); 
    }
    this_MethodInvocation_0=ruleMethodInvocation
    { 
        $current = $this_MethodInvocation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getFieldAccessParserRuleCall_1(), currentNode); 
    }
    this_FieldAccess_1=ruleFieldAccess
    { 
        $current = $this_FieldAccess_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleMethodInvocation
entryRuleMethodInvocation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodInvocationRule(), currentNode); }
	 iv_ruleMethodInvocation=ruleMethodInvocation 
	 { $current=$iv_ruleMethodInvocation.current; } 
	 EOF 
;

// Rule MethodInvocation
ruleMethodInvocation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getMethodInvocationAccess().getMethodMethodNameCrossReference_0_0(), "method"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getMethodInvocationAccess().getLeftParenthesisKeyword_1(), null); 
    }
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodInvocationAccess().getArgumentListExpressionParserRuleCall_2_0_0_0(), currentNode); 
	    }
		lv_argumentList_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argumentList",
	        		lv_argumentList_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodInvocationAccess().getArgumentListBooleanExpressionParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_argumentList_3_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argumentList",
	        		lv_argumentList_3_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(	',' 
    {
        createLeafNode(grammarAccess.getMethodInvocationAccess().getCommaKeyword_2_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodInvocationAccess().getArgumentListExpressionParserRuleCall_2_1_1_0_0(), currentNode); 
	    }
		lv_argumentList_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argumentList",
	        		lv_argumentList_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodInvocationAccess().getArgumentListBooleanExpressionParserRuleCall_2_1_1_1_0(), currentNode); 
	    }
		lv_argumentList_6_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodInvocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argumentList",
	        		lv_argumentList_6_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*)?	')' 
    {
        createLeafNode(grammarAccess.getMethodInvocationAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleFieldAccess
entryRuleFieldAccess returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldAccessRule(), currentNode); }
	 iv_ruleFieldAccess=ruleFieldAccess 
	 { $current=$iv_ruleFieldAccess.current; } 
	 EOF 
;

// Rule FieldAccess
ruleFieldAccess returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldAccessRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFieldAccessAccess().getFieldFieldNameCrossReference_0(), "field"); 
	}

)
)
;





// Entry rule entryRuleParameterAssignment
entryRuleParameterAssignment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterAssignmentRule(), currentNode); }
	 iv_ruleParameterAssignment=ruleParameterAssignment 
	 { $current=$iv_ruleParameterAssignment.current; } 
	 EOF 
;

// Rule ParameterAssignment
ruleParameterAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getParameterAssignmentAccess().getParameterParameterCrossReference_0_0(), "parameter"); 
	}

)
)	'=' 
    {
        createLeafNode(grammarAccess.getParameterAssignmentAccess().getEqualsSignKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAssignmentAccess().getValueExpressionParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAssignmentAccess().getValueBooleanExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_value_3_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"BooleanExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


