/*
 * generated by Xtext
 */
package org.xtext.example.scoping;

import java.util.Collection;
import java.util.LinkedList;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.xtext.example.swrtj.AnonimousRecord;
import org.xtext.example.swrtj.AnonimousTrait;
import org.xtext.example.swrtj.Class;
import org.xtext.example.swrtj.DottedExpression;
import org.xtext.example.swrtj.Expression;
import org.xtext.example.swrtj.FieldName;
import org.xtext.example.swrtj.File;
import org.xtext.example.swrtj.Interface;
import org.xtext.example.swrtj.MethodName;
import org.xtext.example.swrtj.NestedRecordExpression;
import org.xtext.example.swrtj.NestedTraitExpression;
import org.xtext.example.swrtj.RecordName;
import org.xtext.example.swrtj.TraitName;
import org.xtext.example.typechecking.ExpressionType;
import org.xtext.example.utils.Lookup;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 */
public class SwrtjScopeProvider extends AbstractDeclarativeScopeProvider {
	private Lookup lookup = new Lookup();
	
	/**
	 * Returns general scope for interfaces.
	 */
	public IScope scope_Interface(File file, EReference ref) {
		Collection<File> fileList = lookup.getAllFiles(file);
		Collection<Interface> interfaceList = new LinkedList<Interface>();
		
		for(File f : fileList) {
			interfaceList.addAll(EcoreUtil2.getAllContentsOfType(f, Interface.class));
		}

		return Scopes.scopeFor(interfaceList);
	}
	
	
	/**
	 * Returns general scope for constructors.
	 */
	public IScope scope_Class(File file, EReference ref) {
		Collection<File> fileList = lookup.getAllFiles(file);
		Collection<Class> classList = new LinkedList<Class>();
		
		for(File f : fileList) {
			classList.addAll(EcoreUtil2.getAllContentsOfType(f, Class.class));
		}

		return Scopes.scopeFor(classList);
	}
	
	/**
	 * Returns general scope to parameter references.
	 * In a constructor, the scope is limited to its parameter declarations.
	 */
	public IScope scope_Parameter(Expression expression, EReference ref) {
		return Scopes.scopeFor(lookup.getParameters(expression));
	}
	
	/**
	 * Returns general scope for method calls.
	 */
	public IScope scope_MethodInvocation_method(DottedExpression context, EReference ref) {
		ExpressionType expressionType = ExpressionType.createInstance(context.getReceiver(), true);
		Collection<MethodName> methodList = null;
		if(expressionType != null)
			methodList = expressionType.getInvokableMethods();
		else
			methodList = new LinkedList<MethodName>();

		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for field accesses.
	 */
	public IScope scope_FieldAccess_field(DottedExpression context, EReference ref) {
		ExpressionType expressionType = ExpressionType.createInstance(context.getReceiver(), true);
		Collection<FieldName> fieldList = null;
		if(expressionType != null)
			fieldList = expressionType.getInvokableFields();
		else
			fieldList = new LinkedList<FieldName>();

		return Scopes.scopeFor(fieldList);
	}
	
	/* RECORD OPERATION SCOPING */
	
	/**
	 * Returns general scope for excluding fields.
	 */
	public IScope scope_RecordExclude_field(AnonimousRecord context, EReference ref) {
		Collection<FieldName> fieldList = lookup.getRecordFieldNames(context.getDeclarationList());

		return Scopes.scopeFor(fieldList);
	}
	
	/**
	 * Returns general scope for excluding fields.
	 */
	public IScope scope_RecordExclude_field(RecordName context, EReference ref) {
		Collection<FieldName> fieldList = lookup.getProvidedFields(context.getRecord()).values();

		return Scopes.scopeFor(fieldList);
	}
	
	/**
	 * Returns general scope for excluding fields.
	 */
	public IScope scope_RecordExclude_field(NestedRecordExpression context, EReference ref) {
		Collection<FieldName> fieldList = lookup.getProvidedFields(context.getExpression()).values();

		return Scopes.scopeFor(fieldList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_RecordRename_originalField(AnonimousRecord context, EReference ref) {
		Collection<FieldName> fieldList = lookup.getRecordFieldNames(context.getDeclarationList());
		
		return Scopes.scopeFor(fieldList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_RecordRename_originalField(RecordName context, EReference ref) {
		Collection<FieldName> fieldList = lookup.getProvidedFields(context.getRecord()).values();

		return Scopes.scopeFor(fieldList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_RecordRename_originalField(NestedRecordExpression context, EReference ref) {
		Collection<FieldName> fieldList = lookup.getProvidedFields(context.getExpression()).values();

		return Scopes.scopeFor(fieldList);
	}
	
	/* TRAIT OPERATION SCOPING */
	
	/**
	 * Returns general scope for excluding fields.
	 */
	public IScope scope_TraitExclude_method(AnonimousTrait context, EReference ref) {
		Collection<MethodName> methodList = lookup.getMethods(context).values();

		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for excluding fields.
	 */
	public IScope scope_TraitExclude_method(TraitName context, EReference ref) {
		Collection<MethodName> methodList = lookup.getMethods(context.getTrait()).values();

		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for excluding fields.
	 */
	public IScope scope_TraitExclude_method(NestedTraitExpression context, EReference ref) {
		Collection<MethodName> methodList = lookup.getMethods(context.getExpression()).values();

		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_TraitAlias_originalMethod(AnonimousTrait context, EReference ref) {
		Collection<MethodName> methodList = lookup.getMethods(context).values();
		
		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_TraitAlias_originalMethod(TraitName context, EReference ref) {
		Collection<MethodName> methodList = lookup.getMethods(context.getTrait()).values();

		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_TraitAlias_originalMethod(NestedTraitExpression context, EReference ref) {
		Collection<MethodName> methodList = lookup.getMethods(context.getExpression()).values();

		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_TraitMethodRename_originalMethod(AnonimousTrait context, EReference ref) {
		Collection<MethodName> methodList = lookup.getMethods(context).values();
		
		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_TraitMethodRename_originalMethod(TraitName context, EReference ref) {
		Collection<MethodName> methodList = lookup.getMethods(context.getTrait()).values();

		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_TraitMethodRename_originalMethod(NestedTraitExpression context, EReference ref) {
		Collection<MethodName> methodList = lookup.getMethods(context.getExpression()).values();

		return Scopes.scopeFor(methodList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_TraitFieldRename_originalField(AnonimousTrait context, EReference ref) {
		Collection<FieldName> fieldList = lookup.getRequiredFields(context).values();
		
		return Scopes.scopeFor(fieldList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_TraitFieldRename_originalField(TraitName context, EReference ref) {
		Collection<FieldName> fieldList = lookup.getRequiredFields(context.getTrait()).values();

		return Scopes.scopeFor(fieldList);
	}
	
	/**
	 * Returns general scope for renaming fields.
	 */
	public IScope scope_TraitFieldRename_originalField(NestedTraitExpression context, EReference ref) {
		Collection<FieldName> fieldList = lookup.getRequiredFields(context.getExpression()).values();

		return Scopes.scopeFor(fieldList);
	}
}
